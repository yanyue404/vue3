import{R as r,o as n,r as e,a as t,_ as o,b as s}from"./utils.D6g6xS_A.js";import{g as i,am as l,Y as a,a4 as d,r as c,b as u,B as p,o as m,c as h,j as f,u as v}from"./framework.eLjRmN09.js";const g=JSON.parse('{"attribute-bindings":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const message = ref(\'Hello World!\')\\r\\n    const isRed = ref(true)\\r\\n    const color = ref(\'green\')\\r\\n\\r\\n    function toggleRed() {\\r\\n      isRed.value = !isRed.value\\r\\n    }\\r\\n\\r\\n    function toggleColor() {\\r\\n      color.value = color.value === \'green\' ? \'blue\' : \'green\'\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      message,\\r\\n      isRed,\\r\\n      color,\\r\\n      toggleRed,\\r\\n      toggleColor\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      message: \'Hello World!\',\\r\\n      isRed: true,\\r\\n      color: \'green\'\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    toggleRed() {\\r\\n      this.isRed = !this.isRed\\r\\n    },\\r\\n    toggleColor() {\\r\\n      this.color = this.color === \'green\' ? \'blue\' : \'green\'\\r\\n    }\\r\\n  }\\r\\n}\\n","style.css":".red {\\r\\n  color: red;\\r\\n}\\n","template.html":"<p>\\r\\n  <span :title=\\"message\\">\\r\\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\\r\\n  </span>\\r\\n</p>\\r\\n\\r\\n\x3c!--\\r\\n除了普通字符串之外，\\r\\nclass 绑定还特别支持了对象和数组\\r\\n--\x3e\\r\\n<p :class=\\"{ red: isRed }\\" @click=\\"toggleRed\\">\\r\\n  This should be red... but click me to toggle it.\\r\\n</p>\\r\\n\\r\\n\x3c!-- 样式绑定也支持对象和数组 --\x3e\\r\\n<p :style=\\"{ color }\\" @click=\\"toggleColor\\">\\r\\n  This should be green, and should toggle between green and blue on click.\\r\\n</p>\\r\\n"},"description.txt":"现在我们将元素的 attribute / property 响应式地绑定到状态上。\\r\\n这个 :title 语法是 v-bind:title 的简写。"},"cells":{"App":{"composition.js":"import Cell from \'./Cell.vue\'\\r\\nimport { cells } from \'./store.js\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    Cell\\r\\n  },\\r\\n  setup() {\\r\\n    const cols = cells.map((_, i) => String.fromCharCode(65 + i))\\r\\n    return {\\r\\n      cols,\\r\\n      cells\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import Cell from \'./Cell.vue\'\\r\\nimport { cells } from \'./store.js\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    Cell\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      cols: cells.map((_, i) => String.fromCharCode(65 + i)),\\r\\n      cells\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"body {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\ntable {\\r\\n  border-collapse: collapse;\\r\\n  table-layout: fixed;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\nth {\\r\\n  background-color: #eee;\\r\\n}\\r\\n\\r\\ntr:first-of-type th {\\r\\n  width: 100px;\\r\\n}\\r\\n\\r\\ntr:first-of-type th:first-of-type {\\r\\n  width: 25px;\\r\\n}\\r\\n\\r\\ntd {\\r\\n  border: 1px solid #ccc;\\r\\n  height: 1.5em;\\r\\n  overflow: hidden;\\r\\n}\\r\\n","template.html":"<table>\\r\\n  <thead>\\r\\n    <tr>\\r\\n      <th></th>\\r\\n      <th v-for=\\"c in cols\\">{{ c }}</th>\\r\\n    </tr>\\r\\n  </thead>\\r\\n  <tbody>\\r\\n    <tr v-for=\\"i in cells[0].length\\">\\r\\n      <th>{{ i - 1 }}</th>\\r\\n      <td v-for=\\"(c, j) in cols\\">\\r\\n        <Cell :r=\\"i - 1\\" :c=\\"j\\"></Cell>\\r\\n      </td>\\r\\n    </tr>\\r\\n  </tbody>\\r\\n</table>\\r\\n"},"Cell":{"composition.js":"import { ref } from \'vue\'\\r\\nimport { cells, evalCell } from \'./store.js\'\\r\\n\\r\\nexport default {\\r\\n  props: {\\r\\n    c: Number,\\r\\n    r: Number\\r\\n  },\\r\\n  setup(props) {\\r\\n    const editing = ref(false)\\r\\n\\r\\n    function update(e) {\\r\\n      editing.value = false\\r\\n      cells[props.c][props.r] = e.target.value.trim()\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      cells,\\r\\n      editing,\\r\\n      evalCell,\\r\\n      update\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import { cells, evalCell } from \'./store.js\'\\r\\n\\r\\nexport default {\\r\\n  props: {\\r\\n    c: Number,\\r\\n    r: Number\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      editing: false,\\r\\n      cells\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    evalCell,\\r\\n    update(e) {\\r\\n      this.editing = false\\r\\n      cells[this.c][this.r] = e.target.value.trim()\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":".cell, .cell input {\\r\\n  height: 1.5em;\\r\\n  line-height: 1.5;\\r\\n  font-size: 15px;\\r\\n}\\r\\n\\r\\n.cell span {\\r\\n  padding: 0 6px;\\r\\n}\\r\\n\\r\\n.cell input {\\r\\n  width: 100%;\\r\\n  box-sizing: border-box;\\r\\n}\\n","template.html":"<div class=\\"cell\\" :title=\\"cells[c][r]\\" @click=\\"editing = true\\">\\r\\n  <input\\r\\n    v-if=\\"editing\\"\\r\\n    :value=\\"cells[c][r]\\"\\r\\n    @change=\\"update\\"\\r\\n    @blur=\\"update\\"\\r\\n    @vue:mounted=\\"({ el }) => el.focus()\\"\\r\\n  >\\r\\n  <span v-else>{{ evalCell(cells[c][r]) }}</span>\\r\\n</div>\\r\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#cells","store.js":"import { reactive } from \'vue\'\\r\\n\\r\\nconst COLS = 5\\r\\nconst ROWS = 20\\r\\n\\r\\nexport const cells = reactive(\\r\\n  Array.from(Array(COLS).keys()).map((i) =>\\r\\n    Array.from(Array(ROWS).keys()).map((i) => \'\')\\r\\n  )\\r\\n)\\r\\n\\r\\n// 原版 https://codesandbox.io/s/jotai-7guis-task7-cells-mzoit?file=/src/atoms.ts\\r\\n// 作者 @dai-shi\\r\\nexport function evalCell(exp) {\\r\\n  if (!exp.startsWith(\'=\')) {\\r\\n    return exp\\r\\n  }\\r\\n\\r\\n  // = A1 + B2 ---\x3e get(0,1) + get(1,2)\\r\\n  exp = exp\\r\\n    .slice(1)\\r\\n    .replace(\\r\\n      /\\\\b([A-Z])(\\\\d{1,2})\\\\b/g,\\r\\n      (_, c, r) => `get(${c.charCodeAt(0) - 65},${r})`\\r\\n    )\\r\\n\\r\\n  try {\\r\\n    return new Function(\'get\', `return ${exp}`)(getCellValue)\\r\\n  } catch (e) {\\r\\n    return `#ERROR ${e}`\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction getCellValue(c, r) {\\r\\n  const val = evalCell(cells[c][r])\\r\\n  const num = Number(val)\\r\\n  return Number.isFinite(num) ? num : val\\r\\n}\\r\\n"},"circle-drawer":{"App":{"composition.js":"import { ref, shallowReactive, toRaw } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const history = shallowReactive([[]])\\r\\n    const index = ref(0)\\r\\n    const circles = ref([])\\r\\n    const selected = ref()\\r\\n    const adjusting = ref(false)\\r\\n\\r\\n    function onClick({ clientX: x, clientY: y }) {\\r\\n      if (adjusting.value) {\\r\\n        adjusting.value = false\\r\\n        selected.value = null\\r\\n        push()\\r\\n        return\\r\\n      }\\r\\n\\r\\n      selected.value = [...circles.value].reverse().find(({ cx, cy, r }) => {\\r\\n        const dx = cx - x\\r\\n        const dy = cy - y\\r\\n        return Math.sqrt(dx * dx + dy * dy) <= r\\r\\n      })\\r\\n\\r\\n      if (!selected.value) {\\r\\n        circles.value.push({\\r\\n          cx: x,\\r\\n          cy: y,\\r\\n          r: 50\\r\\n        })\\r\\n        push()\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function adjust(circle) {\\r\\n      selected.value = circle\\r\\n      adjusting.value = true\\r\\n    }\\r\\n\\r\\n    function push() {\\r\\n      history.length = ++index.value\\r\\n      history.push(clone(circles.value))\\r\\n      console.log(toRaw(history))\\r\\n    }\\r\\n\\r\\n    function undo() {\\r\\n      circles.value = clone(history[--index.value])\\r\\n    }\\r\\n\\r\\n    function redo() {\\r\\n      circles.value = clone(history[++index.value])\\r\\n    }\\r\\n\\r\\n    function clone(circles) {\\r\\n      return circles.map((c) => ({ ...c }))\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      history,\\r\\n      index,\\r\\n      circles,\\r\\n      selected,\\r\\n      adjusting,\\r\\n      onClick,\\r\\n      adjust,\\r\\n      undo,\\r\\n      redo\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"function clone(circles) {\\r\\n  return circles.map((c) => ({ ...c }))\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  data() {\\r\\n    return {\\r\\n      history: [[]],\\r\\n      index: 0,\\r\\n      circles: [],\\r\\n      selected: null,\\r\\n      adjusting: false\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    onClick({ clientX: x, clientY: y }) {\\r\\n      if (this.adjusting) {\\r\\n        this.adjusting = false\\r\\n        this.selected = null\\r\\n        this.push()\\r\\n        return\\r\\n      }\\r\\n\\r\\n      this.selected = [...this.circles].reverse().find(({ cx, cy, r }) => {\\r\\n        const dx = cx - x\\r\\n        const dy = cy - y\\r\\n        return Math.sqrt(dx * dx + dy * dy) <= r\\r\\n      })\\r\\n\\r\\n      if (!this.selected) {\\r\\n        this.circles.push({\\r\\n          cx: x,\\r\\n          cy: y,\\r\\n          r: 50\\r\\n        })\\r\\n        this.push()\\r\\n      }\\r\\n    },\\r\\n\\r\\n    adjust(circle) {\\r\\n      this.selected = circle\\r\\n      this.adjusting = true\\r\\n    },\\r\\n\\r\\n    push() {\\r\\n      this.history.length = ++this.index\\r\\n      this.history.push(clone(this.circles))\\r\\n    },\\r\\n\\r\\n    undo() {\\r\\n      this.circles = clone(this.history[--this.index])\\r\\n    },\\r\\n\\r\\n    redo() {\\r\\n      this.circles = clone(this.history[++this.index])\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"body {\\r\\n  margin: 0;\\r\\n  overflow: hidden;\\r\\n}\\r\\n\\r\\nsvg {\\r\\n  width: 100vw;\\r\\n  height: 100vh;\\r\\n  background-color: #eee;\\r\\n}\\r\\n\\r\\ncircle {\\r\\n  stroke: #000;\\r\\n}\\r\\n\\r\\n.controls {\\r\\n  position: fixed;\\r\\n  top: 10px;\\r\\n  left: 0;\\r\\n  right: 0;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.controls button + button {\\r\\n  margin-left: 6px;\\r\\n}\\r\\n\\r\\n.dialog {\\r\\n  position: fixed;\\r\\n  top: calc(50% - 50px);\\r\\n  left: calc(50% - 175px);\\r\\n  background: #fff;\\r\\n  width: 350px;\\r\\n  height: 100px;\\r\\n  padding: 5px 20px;\\r\\n  box-sizing: border-box;\\r\\n  border-radius: 4px;\\r\\n  text-align: center;\\r\\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);\\r\\n}\\r\\n\\r\\n.dialog input {\\r\\n  display: block;\\r\\n  width: 200px;\\r\\n  margin: 0px auto;\\r\\n}\\r\\n\\r\\n.tip {\\r\\n  text-align: center;\\r\\n  padding: 0 50px;\\r\\n  color: #bbb;\\r\\n}\\n","template.html":"<svg @click=\\"onClick\\">\\r\\n  <foreignObject x=\\"0\\" y=\\"40%\\" width=\\"100%\\" height=\\"200\\">\\r\\n    <p class=\\"tip\\">\\r\\n      Click on the canvas to draw a circle. Click on a circle to select it.\\r\\n      Right-click on the canvas to adjust the radius of the selected circle.\\r\\n    </p>\\r\\n  </foreignObject>\\r\\n  <circle\\r\\n    v-for=\\"circle in circles\\"\\r\\n    :cx=\\"circle.cx\\"\\r\\n    :cy=\\"circle.cy\\"\\r\\n    :r=\\"circle.r\\"\\r\\n    :fill=\\"circle === selected ? \'#ccc\' : \'#fff\'\\"\\r\\n    @click=\\"selected = circle\\"\\r\\n    @contextmenu.prevent=\\"adjust(circle)\\"\\r\\n  ></circle>\\r\\n</svg>\\r\\n\\r\\n<div class=\\"controls\\">\\r\\n  <button @click=\\"undo\\" :disabled=\\"index <= 0\\">Undo</button>\\r\\n  <button @click=\\"redo\\" :disabled=\\"index >= history.length - 1\\">Redo</button>\\r\\n</div>\\r\\n\\r\\n<div class=\\"dialog\\" v-if=\\"adjusting\\" @click.stop>\\r\\n  <p>Adjust radius of circle at ({{ selected.cx }}, {{ selected.cy }})</p>\\r\\n  <input type=\\"range\\" v-model=\\"selected.r\\" min=\\"1\\" max=\\"300\\">\\r\\n</div>\\r\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#circle"},"conditionals-and-loops":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const show = ref(true)\\r\\n    const list = ref([1, 2, 3])\\r\\n\\r\\n    return {\\r\\n      show,\\r\\n      list\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      show: true,\\r\\n      list: [1, 2, 3]\\r\\n    }\\r\\n  }\\r\\n}\\n","template.html":"<button @click=\\"show = !show\\">Toggle List</button>\\r\\n<button @click=\\"list.push(list.length + 1)\\">Push Number</button>\\r\\n<button @click=\\"list.pop()\\">Pop Number</button>\\r\\n<button @click=\\"list.reverse()\\">Reverse List</button>\\r\\n\\r\\n<ul v-if=\\"show && list.length\\">\\r\\n  <li v-for=\\"item of list\\">{{ item }}</li>\\r\\n</ul>\\r\\n<p v-else-if=\\"list.length\\">List is not empty, but hidden.</p>\\r\\n<p v-else>List is empty.</p>\\r\\n"},"description.txt":"我们可以通过 v-if 和 v-for 指令条件性地或循环地渲染内容。"},"counter":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const count = ref(0)\\r\\n\\r\\n    return {\\r\\n      count\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      count: 0\\r\\n    }\\r\\n  }\\r\\n}\\n","template.html":"{{ count }}\\r\\n<button @click=\\"count++\\">Count</button>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#counter"},"crud":{"App":{"composition.js":"import { ref, reactive, computed, watch } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const names = reactive([\'Emil, Hans\', \'Mustermann, Max\', \'Tisch, Roman\'])\\r\\n    const selected = ref(\'\')\\r\\n    const prefix = ref(\'\')\\r\\n    const first = ref(\'\')\\r\\n    const last = ref(\'\')\\r\\n\\r\\n    const filteredNames = computed(() =>\\r\\n      names.filter((n) =>\\r\\n        n.toLowerCase().startsWith(prefix.value.toLowerCase())\\r\\n      )\\r\\n    )\\r\\n\\r\\n    watch(selected, (name) => {\\r\\n      ;[last.value, first.value] = name.split(\', \')\\r\\n    })\\r\\n\\r\\n    function create() {\\r\\n      if (hasValidInput()) {\\r\\n        const fullName = `${last.value}, ${first.value}`\\r\\n        if (!names.includes(fullName)) {\\r\\n          names.push(fullName)\\r\\n          first.value = last.value = \'\'\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function update() {\\r\\n      if (hasValidInput() && selected.value) {\\r\\n        const i = names.indexOf(selected.value)\\r\\n        names[i] = selected.value = `${last.value}, ${first.value}`\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function del() {\\r\\n      if (selected.value) {\\r\\n        const i = names.indexOf(selected.value)\\r\\n        names.splice(i, 1)\\r\\n        selected.value = first.value = last.value = \'\'\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function hasValidInput() {\\r\\n      return first.value.trim() && last.value.trim()\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      filteredNames,\\r\\n      selected,\\r\\n      prefix,\\r\\n      first,\\r\\n      last,\\r\\n      create,\\r\\n      update,\\r\\n      del\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      names: [\'Emil, Hans\', \'Mustermann, Max\', \'Tisch, Roman\'],\\r\\n      selected: \'\',\\r\\n      prefix: \'\',\\r\\n      first: \'\',\\r\\n      last: \'\'\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    filteredNames() {\\r\\n      return this.names.filter((n) =>\\r\\n        n.toLowerCase().startsWith(this.prefix.toLowerCase())\\r\\n      )\\r\\n    }\\r\\n  },\\r\\n  watch: {\\r\\n    selected(name) {\\r\\n      ;[this.last, this.first] = name.split(\', \')\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    create() {\\r\\n      if (this.hasValidInput()) {\\r\\n        const fullName = `${this.last}, ${this.first}`\\r\\n        if (!this.names.includes(fullName)) {\\r\\n          this.names.push(fullName)\\r\\n          this.first = this.last = \'\'\\r\\n        }\\r\\n      }\\r\\n    },\\r\\n    update() {\\r\\n      if (this.hasValidInput() && this.selected) {\\r\\n        const i = this.names.indexOf(this.selected)\\r\\n        this.names[i] = this.selected = `${this.last}, ${this.first}`\\r\\n      }\\r\\n    },\\r\\n    del() {\\r\\n      if (this.selected) {\\r\\n        const i = this.names.indexOf(this.selected)\\r\\n        this.names.splice(i, 1)\\r\\n        this.selected = this.first = this.last = \'\'\\r\\n      }\\r\\n    },\\r\\n    hasValidInput() {\\r\\n      return this.first.trim() && this.last.trim()\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"* {\\r\\n  font-size: inherit;\\r\\n}\\r\\n\\r\\ninput {\\r\\n  display: block;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\nselect {\\r\\n  float: left;\\r\\n  margin: 0 1em 1em 0;\\r\\n  width: 14em;\\r\\n}\\r\\n\\r\\n.buttons {\\r\\n  clear: both;\\r\\n}\\r\\n\\r\\nbutton + button {\\r\\n  margin-left: 5px;\\r\\n}\\r\\n","template.html":"<div><input v-model=\\"prefix\\" placeholder=\\"Filter prefix\\"></div>\\r\\n\\r\\n<select size=\\"5\\" v-model=\\"selected\\">\\r\\n  <option v-for=\\"name in filteredNames\\" :key=\\"name\\">{{ name }}</option>\\r\\n</select>\\r\\n\\r\\n<label>Name: <input v-model=\\"first\\"></label>\\r\\n<label>Surname: <input v-model=\\"last\\"></label>\\r\\n\\r\\n<div class=\\"buttons\\">\\r\\n  <button @click=\\"create\\">Create</button>\\r\\n  <button @click=\\"update\\">Update</button>\\r\\n  <button @click=\\"del\\">Delete</button>\\r\\n</div>\\r\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#crud"},"fetching-data":{"App":{"composition.js":"import { ref, watchEffect } from \'vue\'\\r\\n\\r\\nconst API_URL = `https://api.github.com/repos/vuejs/core/commits?per_page=3&sha=`\\r\\nconst branches = [\'main\', \'v2-compat\']\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const currentBranch = ref(branches[0])\\r\\n    const commits = ref(null)\\r\\n\\r\\n    watchEffect(async () => {\\r\\n      // 该 effect 会立即运行，\\r\\n      // 并且在 currentBranch.value 改变时重新运行\\r\\n      const url = `${API_URL}${currentBranch.value}`\\r\\n      commits.value = await (await fetch(url)).json()\\r\\n    })\\r\\n\\r\\n    function truncate(v) {\\r\\n      const newline = v.indexOf(\'\\\\n\')\\r\\n      return newline > 0 ? v.slice(0, newline) : v\\r\\n    }\\r\\n\\r\\n    function formatDate(v) {\\r\\n      return v.replace(/T|Z/g, \' \')\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      branches,\\r\\n      currentBranch,\\r\\n      commits,\\r\\n      truncate,\\r\\n      formatDate\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"const API_URL = `https://api.github.com/repos/vuejs/core/commits?per_page=3&sha=`\\r\\n\\r\\nexport default {\\r\\n  data: () => ({\\r\\n    branches: [\'main\', \'v2-compat\'],\\r\\n    currentBranch: \'main\',\\r\\n    commits: null\\r\\n  }),\\r\\n\\r\\n  created() {\\r\\n    // 在初始化的时候进行获取\\r\\n    this.fetchData()\\r\\n  },\\r\\n\\r\\n  watch: {\\r\\n    // 当 currentBranch 改变时重新获取\\r\\n    currentBranch: \'fetchData\'\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    async fetchData() {\\r\\n      const url = `${API_URL}${this.currentBranch}`\\r\\n      this.commits = await (await fetch(url)).json()\\r\\n    },\\r\\n    truncate(v) {\\r\\n      const newline = v.indexOf(\'\\\\n\')\\r\\n      return newline > 0 ? v.slice(0, newline) : v\\r\\n    },\\r\\n    formatDate(v) {\\r\\n      return v.replace(/T|Z/g, \' \')\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"a {\\r\\n  text-decoration: none;\\r\\n  color: #42b883;\\r\\n}\\r\\nli {\\r\\n  line-height: 1.5em;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n.author,\\r\\n.date {\\r\\n  font-weight: bold;\\r\\n}\\r\\n","template.html":"<h1>Latest Vue Core Commits</h1>\\r\\n<template v-for=\\"branch in branches\\">\\r\\n  <input type=\\"radio\\"\\r\\n    :id=\\"branch\\"\\r\\n    :value=\\"branch\\"\\r\\n    name=\\"branch\\"\\r\\n    v-model=\\"currentBranch\\">\\r\\n  <label :for=\\"branch\\">{{ branch }}</label>\\r\\n</template>\\r\\n<p>vuejs/vue@{{ currentBranch }}</p>\\r\\n<ul>\\r\\n  <li v-for=\\"{ html_url, sha, author, commit } in commits\\">\\r\\n    <a :href=\\"html_url\\" target=\\"_blank\\" class=\\"commit\\">{{ sha.slice(0, 7) }}</a>\\r\\n    - <span class=\\"message\\">{{ truncate(commit.message) }}</span><br>\\r\\n    by <span class=\\"author\\">\\r\\n      <a :href=\\"author.html_url\\" target=\\"_blank\\">{{ commit.author.name }}</a>\\r\\n    </span>\\r\\n    at <span class=\\"date\\">{{ formatDate(commit.author.date) }}</span>\\r\\n  </li>\\r\\n</ul>\\r\\n"},"description.txt":"这个示例会通过 GitHub 的 API 获取最新的 Vue.js 提交信息并将其展示为列表。\\r\\n你可以在两个分支之间切换。"},"flight-booker":{"App":{"composition.js":"import { ref, computed } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const flightType = ref(\'one-way flight\')\\r\\n    const departureDate = ref(dateToString(new Date()))\\r\\n    const returnDate = ref(departureDate.value)\\r\\n\\r\\n    const isReturn = computed(() => flightType.value === \'return flight\')\\r\\n\\r\\n    const canBook = computed(\\r\\n      () =>\\r\\n        !isReturn.value ||\\r\\n        stringToDate(returnDate.value) > stringToDate(departureDate.value)\\r\\n    )\\r\\n\\r\\n    function book() {\\r\\n      alert(\\r\\n        isReturn.value\\r\\n          ? `You have booked a return flight leaving on ${departureDate.value} and returning on ${returnDate.value}.`\\r\\n          : `You have booked a one-way flight leaving on ${departureDate.value}.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    function stringToDate(str) {\\r\\n      const [y, m, d] = str.split(\'-\')\\r\\n      return new Date(+y, m - 1, +d)\\r\\n    }\\r\\n\\r\\n    function dateToString(date) {\\r\\n      return (\\r\\n        date.getFullYear() +\\r\\n        \'-\' +\\r\\n        pad(date.getMonth() + 1) +\\r\\n        \'-\' +\\r\\n        pad(date.getDate())\\r\\n      )\\r\\n    }\\r\\n\\r\\n    function pad(n, s = String(n)) {\\r\\n      return s.length < 2 ? `0${s}` : s\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      flightType,\\r\\n      departureDate,\\r\\n      returnDate,\\r\\n      isReturn,\\r\\n      canBook,\\r\\n      book\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"function stringToDate(str) {\\r\\n  const [y, m, d] = str.split(\'-\')\\r\\n  return new Date(+y, m - 1, +d)\\r\\n}\\r\\n\\r\\nfunction dateToString(date) {\\r\\n  return (\\r\\n    date.getFullYear() +\\r\\n    \'-\' +\\r\\n    pad(date.getMonth() + 1) +\\r\\n    \'-\' +\\r\\n    pad(date.getDate())\\r\\n  )\\r\\n}\\r\\n\\r\\nfunction pad(n, s = String(n)) {\\r\\n  return s.length < 2 ? `0${s}` : s\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  data() {\\r\\n    return {\\r\\n      flightType: \'one-way flight\',\\r\\n      departureDate: dateToString(new Date()),\\r\\n      returnDate: dateToString(new Date())\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    isReturn() {\\r\\n      return this.flightType === \'return flight\'\\r\\n    },\\r\\n    canBook() {\\r\\n      return (\\r\\n        !this.isReturn ||\\r\\n        stringToDate(this.returnDate) > stringToDate(this.departureDate)\\r\\n      )\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    book() {\\r\\n      alert(\\r\\n        this.isReturn\\r\\n          ? `You have booked a return flight leaving on ${this.departureDate} and returning on ${this.returnDate}.`\\r\\n        \\t: `You have booked a one-way flight leaving on ${this.departureDate}.`\\r\\n      )\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"select,\\r\\ninput,\\r\\nbutton {\\r\\n  display: block;\\r\\n  margin: 0.5em 0;\\r\\n  font-size: 15px;\\r\\n}\\r\\n\\r\\ninput[disabled] {\\r\\n  color: #999;\\r\\n}\\r\\n\\r\\np {\\r\\n  color: red;\\r\\n}\\n","template.html":"<select v-model=\\"flightType\\">\\r\\n  <option value=\\"one-way flight\\">One-way Flight</option>\\r\\n  <option value=\\"return flight\\">Return Flight</option>\\r\\n</select>\\r\\n\\r\\n<input type=\\"date\\" v-model=\\"departureDate\\">\\r\\n<input type=\\"date\\" v-model=\\"returnDate\\" :disabled=\\"!isReturn\\">\\r\\n\\r\\n<button :disabled=\\"!canBook\\" @click=\\"book\\">Book</button>\\r\\n\\r\\n<p>{{ canBook ? \'\' : \'Return date must be after departure date.\' }}</p>\\r\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#flight"},"form-bindings":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const text = ref(\'Edit me\')\\r\\n    const checked = ref(true)\\r\\n    const checkedNames = ref([\'Jack\'])\\r\\n    const picked = ref(\'One\')\\r\\n    const selected = ref(\'A\')\\r\\n    const multiSelected = ref([\'A\'])\\r\\n\\r\\n    return {\\r\\n      text,\\r\\n      checked,\\r\\n      checkedNames,\\r\\n      picked,\\r\\n      selected,\\r\\n      multiSelected\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      text: \'Edit me\',\\r\\n      checked: true,\\r\\n      checkedNames: [\'Jack\'],\\r\\n      picked: \'One\',\\r\\n      selected: \'A\',\\r\\n      multiSelected: [\'A\']\\r\\n    }\\r\\n  }\\r\\n}\\n","template.html":"<h2>Text Input</h2>\\r\\n<input v-model=\\"text\\"> {{ text }}\\r\\n\\r\\n<h2>Checkbox</h2>\\r\\n<input type=\\"checkbox\\" id=\\"checkbox\\" v-model=\\"checked\\">\\r\\n<label for=\\"checkbox\\">Checked: {{ checked }}</label>\\r\\n\\r\\n\x3c!--\\r\\n  多个复选框可以绑定到\\r\\n  相同的 v-model 数组\\r\\n--\x3e\\r\\n<h2>Multi Checkbox</h2>\\r\\n<input type=\\"checkbox\\" id=\\"jack\\" value=\\"Jack\\" v-model=\\"checkedNames\\">\\r\\n<label for=\\"jack\\">Jack</label>\\r\\n<input type=\\"checkbox\\" id=\\"john\\" value=\\"John\\" v-model=\\"checkedNames\\">\\r\\n<label for=\\"john\\">John</label>\\r\\n<input type=\\"checkbox\\" id=\\"mike\\" value=\\"Mike\\" v-model=\\"checkedNames\\">\\r\\n<label for=\\"mike\\">Mike</label>\\r\\n<p>Checked names: <pre>{{ checkedNames }}</pre></p>\\r\\n\\r\\n<h2>Radio</h2>\\r\\n<input type=\\"radio\\" id=\\"one\\" value=\\"One\\" v-model=\\"picked\\">\\r\\n<label for=\\"one\\">One</label>\\r\\n<br>\\r\\n<input type=\\"radio\\" id=\\"two\\" value=\\"Two\\" v-model=\\"picked\\">\\r\\n<label for=\\"two\\">Two</label>\\r\\n<br>\\r\\n<span>Picked: {{ picked }}</span>\\r\\n\\r\\n<h2>Select</h2>\\r\\n<select v-model=\\"selected\\">\\r\\n  <option disabled value=\\"\\">Please select one</option>\\r\\n  <option>A</option>\\r\\n  <option>B</option>\\r\\n  <option>C</option>\\r\\n</select>\\r\\n<span>Selected: {{ selected }}</span>\\r\\n\\r\\n<h2>Multi Select</h2>\\r\\n<select v-model=\\"multiSelected\\" multiple style=\\"width:100px\\">\\r\\n  <option>A</option>\\r\\n  <option>B</option>\\r\\n  <option>C</option>\\r\\n</select>\\r\\n<span>Selected: {{ multiSelected }}</span>\\r\\n"},"description.txt":"我们可以使用 v-model 指令在状态和表单输入之间创建双向绑定。"},"grid":{"App":{"composition.js":"import DemoGrid from \'./Grid.vue\'\\r\\nimport { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    DemoGrid\\r\\n  },\\r\\n  setup() {\\r\\n    const searchQuery = ref(\'\')\\r\\n    const gridColumns = [\'name\', \'power\']\\r\\n    const gridData = [\\r\\n      { name: \'Chuck Norris\', power: Infinity },\\r\\n      { name: \'Bruce Lee\', power: 9000 },\\r\\n      { name: \'Jackie Chan\', power: 7000 },\\r\\n      { name: \'Jet Li\', power: 8000 }\\r\\n    ]\\r\\n\\r\\n    return {\\r\\n      searchQuery,\\r\\n      gridColumns,\\r\\n      gridData\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import DemoGrid from \'./Grid.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    DemoGrid\\r\\n  },\\r\\n  data: () => ({\\r\\n    searchQuery: \'\',\\r\\n    gridColumns: [\'name\', \'power\'],\\r\\n    gridData: [\\r\\n      { name: \'Chuck Norris\', power: Infinity },\\r\\n      { name: \'Bruce Lee\', power: 9000 },\\r\\n      { name: \'Jackie Chan\', power: 7000 },\\r\\n      { name: \'Jet Li\', power: 8000 }\\r\\n    ]\\r\\n  })\\r\\n}\\r\\n","template.html":"<form id=\\"search\\">\\r\\n  Search <input name=\\"query\\" v-model=\\"searchQuery\\">\\r\\n</form>\\r\\n<DemoGrid\\r\\n  :data=\\"gridData\\"\\r\\n  :columns=\\"gridColumns\\"\\r\\n  :filter-key=\\"searchQuery\\">\\r\\n</DemoGrid>\\n"},"description.txt":"该示例创建了一个可复用网格组件，并结合外部数据使用它。","Grid":{"composition.js":"import { ref, computed } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  props: {\\r\\n    data: Array,\\r\\n    columns: Array,\\r\\n    filterKey: String\\r\\n  },\\r\\n  setup(props) {\\r\\n    const sortKey = ref(\'\')\\r\\n    const sortOrders = ref(\\r\\n      props.columns.reduce((o, key) => ((o[key] = 1), o), {})\\r\\n    )\\r\\n\\r\\n    const filteredData = computed(() => {\\r\\n      let { data, filterKey } = props\\r\\n      if (filterKey) {\\r\\n        filterKey = filterKey.toLowerCase()\\r\\n        data = data.filter((row) => {\\r\\n          return Object.keys(row).some((key) => {\\r\\n            return String(row[key]).toLowerCase().indexOf(filterKey) > -1\\r\\n          })\\r\\n        })\\r\\n      }\\r\\n      const key = sortKey.value\\r\\n      if (key) {\\r\\n        const order = sortOrders.value[key]\\r\\n        data = data.slice().sort((a, b) => {\\r\\n          a = a[key]\\r\\n          b = b[key]\\r\\n          return (a === b ? 0 : a > b ? 1 : -1) * order\\r\\n        })\\r\\n      }\\r\\n      return data\\r\\n    })\\r\\n\\r\\n    function sortBy(key) {\\r\\n      sortKey.value = key\\r\\n      sortOrders.value[key] *= -1\\r\\n    }\\r\\n\\r\\n    function capitalize(str) {\\r\\n      return str.charAt(0).toUpperCase() + str.slice(1)\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      sortKey,\\r\\n      sortOrders,\\r\\n      filteredData,\\r\\n      sortBy,\\r\\n      capitalize\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  props: {\\r\\n    data: Array,\\r\\n    columns: Array,\\r\\n    filterKey: String\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      sortKey: \'\',\\r\\n      sortOrders: this.columns.reduce((o, key) => ((o[key] = 1), o), {})\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    filteredData() {\\r\\n      const sortKey = this.sortKey\\r\\n      const filterKey = this.filterKey && this.filterKey.toLowerCase()\\r\\n      const order = this.sortOrders[sortKey] || 1\\r\\n      let data = this.data\\r\\n      if (filterKey) {\\r\\n        data = data.filter((row) => {\\r\\n          return Object.keys(row).some((key) => {\\r\\n            return String(row[key]).toLowerCase().indexOf(filterKey) > -1\\r\\n          })\\r\\n        })\\r\\n      }\\r\\n      if (sortKey) {\\r\\n        data = data.slice().sort((a, b) => {\\r\\n          a = a[sortKey]\\r\\n          b = b[sortKey]\\r\\n          return (a === b ? 0 : a > b ? 1 : -1) * order\\r\\n        })\\r\\n      }\\r\\n      return data\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    sortBy(key) {\\r\\n      this.sortKey = key\\r\\n      this.sortOrders[key] = this.sortOrders[key] * -1\\r\\n    },\\r\\n    capitalize(str) {\\r\\n      return str.charAt(0).toUpperCase() + str.slice(1)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"table {\\r\\n  border: 2px solid #42b983;\\r\\n  border-radius: 3px;\\r\\n  background-color: #fff;\\r\\n}\\r\\n\\r\\nth {\\r\\n  background-color: #42b983;\\r\\n  color: rgba(255, 255, 255, 0.66);\\r\\n  cursor: pointer;\\r\\n  user-select: none;\\r\\n}\\r\\n\\r\\ntd {\\r\\n  background-color: #f9f9f9;\\r\\n}\\r\\n\\r\\nth,\\r\\ntd {\\r\\n  min-width: 120px;\\r\\n  padding: 10px 20px;\\r\\n}\\r\\n\\r\\nth.active {\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\nth.active .arrow {\\r\\n  opacity: 1;\\r\\n}\\r\\n\\r\\n.arrow {\\r\\n  display: inline-block;\\r\\n  vertical-align: middle;\\r\\n  width: 0;\\r\\n  height: 0;\\r\\n  margin-left: 5px;\\r\\n  opacity: 0.66;\\r\\n}\\r\\n\\r\\n.arrow.asc {\\r\\n  border-left: 4px solid transparent;\\r\\n  border-right: 4px solid transparent;\\r\\n  border-bottom: 4px solid #fff;\\r\\n}\\r\\n\\r\\n.arrow.dsc {\\r\\n  border-left: 4px solid transparent;\\r\\n  border-right: 4px solid transparent;\\r\\n  border-top: 4px solid #fff;\\r\\n}\\r\\n","template.html":"<table v-if=\\"filteredData.length\\">\\r\\n  <thead>\\r\\n    <tr>\\r\\n      <th v-for=\\"key in columns\\"\\r\\n        @click=\\"sortBy(key)\\"\\r\\n        :class=\\"{ active: sortKey == key }\\">\\r\\n        {{ capitalize(key) }}\\r\\n        <span class=\\"arrow\\" :class=\\"sortOrders[key] > 0 ? \'asc\' : \'dsc\'\\">\\r\\n        </span>\\r\\n      </th>\\r\\n    </tr>\\r\\n  </thead>\\r\\n  <tbody>\\r\\n    <tr v-for=\\"entry in filteredData\\">\\r\\n      <td v-for=\\"key in columns\\">\\r\\n        {{entry[key]}}\\r\\n      </td>\\r\\n    </tr>\\r\\n  </tbody>\\r\\n</table>\\r\\n<p v-else>No matches found.</p>\\n"}},"handling-input":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const message = ref(\'Hello World!\')\\r\\n\\r\\n    function reverseMessage() {\\r\\n      // 通过其 .value 属性\\r\\n      // 访问/修改一个 ref 的值。\\r\\n      message.value = message.value.split(\'\').reverse().join(\'\')\\r\\n    }\\r\\n\\r\\n    function notify() {\\r\\n      alert(\'navigation was prevented.\')\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      message,\\r\\n      reverseMessage,\\r\\n      notify\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      message: \'Hello World!\'\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    reverseMessage() {\\r\\n      this.message = this.message.split(\'\').reverse().join(\'\')\\r\\n    },\\r\\n    notify() {\\r\\n      alert(\'navigation was prevented.\')\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"button, a {\\r\\n  display: block;\\r\\n  margin-bottom: 1em;\\r\\n}\\n","template.html":"\x3c!--\\r\\n  注意我们不需要在模板中写 .value，\\r\\n  因为在模板中 ref 会自动“解包”。\\r\\n--\x3e\\r\\n<h1>{{ message }}</h1>\\r\\n\\r\\n\x3c!--\\r\\n  绑定到一个方法/函数。\\r\\n  这个 @click 语法是 v-on:click 的简写。\\r\\n--\x3e\\r\\n<button @click=\\"reverseMessage\\">Reverse Message</button>\\r\\n\\r\\n\x3c!-- 也可以写成一个内联表达式语句 --\x3e\\r\\n<button @click=\\"message += \'!\'\\">Append \\"!\\"</button>\\r\\n\\r\\n\x3c!--\\r\\n  Vue 也为一些像 e.preventDefault() 和 e.stopPropagation()\\r\\n  这样的常见任务提供了修饰符。\\r\\n--\x3e\\r\\n<a href=\\"https://vuejs.org\\" @click.prevent=\\"notify\\">\\r\\n  A link with e.preventDefault()\\r\\n</a>\\r\\n"},"description.txt":"这个示例展示了如何通过 v-on 指令处理用户输入。"},"hello-world":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    // “ref”是用来存储值的响应式数据源。\\r\\n    // 理论上我们在展示该字符串的时候不需要将其包装在 ref() 中，\\r\\n    // 但是在下一个示例中更改这个值的时候，我们就需要它了。\\r\\n    const message = ref(\'Hello World!\')\\r\\n\\r\\n    return {\\r\\n      message\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      message: \'Hello World!\'\\r\\n    }\\r\\n  }\\r\\n}\\n","template.html":"<h1>{{ message }}</h1>\\n"},"description.txt":"跟 Vue 说 Hello World！"},"list-transition":{"App":{"composition.js":"import { shuffle as _shuffle } from \'lodash-es\'\\r\\nimport { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const getInitialItems = () => [1, 2, 3, 4, 5]\\r\\n    const items = ref(getInitialItems())\\r\\n    let id = items.value.length + 1\\r\\n\\r\\n    function insert() {\\r\\n      const i = Math.round(Math.random() * items.value.length)\\r\\n      items.value.splice(i, 0, id++)\\r\\n    }\\r\\n\\r\\n    function reset() {\\r\\n      items.value = getInitialItems()\\r\\n    }\\r\\n\\r\\n    function shuffle() {\\r\\n      items.value = _shuffle(items.value)\\r\\n    }\\r\\n\\r\\n    function remove(item) {\\r\\n      const i = items.value.indexOf(item)\\r\\n      if (i > -1) {\\r\\n        items.value.splice(i, 1)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      items,\\r\\n      insert,\\r\\n      reset,\\r\\n      shuffle,\\r\\n      remove\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import { shuffle } from \'lodash-es\'\\r\\n\\r\\nconst getInitialItems = () => [1, 2, 3, 4, 5]\\r\\nlet id = getInitialItems().length + 1\\r\\n\\r\\nexport default {\\r\\n  data() {\\r\\n    return {\\r\\n      items: getInitialItems()\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    insert() {\\r\\n      const i = Math.round(Math.random() * this.items.length)\\r\\n      this.items.splice(i, 0, id++)\\r\\n    },\\r\\n    reset() {\\r\\n      this.items = getInitialItems()\\r\\n    },\\r\\n    shuffle() {\\r\\n      this.items = shuffle(this.items)\\r\\n    },\\r\\n    remove(item) {\\r\\n      const i = this.items.indexOf(item)\\r\\n      if (i > -1) {\\r\\n        this.items.splice(i, 1)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":".container {\\r\\n  position: relative;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.item {\\r\\n  width: 100%;\\r\\n  height: 30px;\\r\\n  background-color: #f3f3f3;\\r\\n  border: 1px solid #666;\\r\\n  box-sizing: border-box;\\r\\n}\\r\\n\\r\\n/* 1. 声明过渡效果 */\\r\\n.fade-move,\\r\\n.fade-enter-active,\\r\\n.fade-leave-active {\\r\\n  transition: all 0.5s cubic-bezier(0.55, 0, 0.1, 1);\\r\\n}\\r\\n\\r\\n/* 2. 声明进入和离开的状态 */\\r\\n.fade-enter-from,\\r\\n.fade-leave-to {\\r\\n  opacity: 0;\\r\\n  transform: scaleY(0.01) translate(30px, 0);\\r\\n}\\r\\n\\r\\n/* 3. 确保离开的项目被移除出了布局流\\r\\n      以便正确地计算移动时的动画效果。 */\\r\\n.fade-leave-active {\\r\\n  position: absolute;\\r\\n}\\r\\n","template.html":"<button @click=\\"insert\\">insert at random index</button>\\r\\n<button @click=\\"reset\\">reset</button>\\r\\n<button @click=\\"shuffle\\">shuffle</button>\\r\\n\\r\\n<TransitionGroup tag=\\"ul\\" name=\\"fade\\" class=\\"container\\">\\r\\n  <div v-for=\\"item in items\\" class=\\"item\\" :key=\\"item\\">\\r\\n    {{ item }}\\r\\n    <button @click=\\"remove(item)\\">x</button>\\r\\n  </div>\\r\\n</TransitionGroup>\\r\\n"},"description.txt":"通过内建的 <TransitionGroup> 实现“FLIP”列表过渡效果。\\r\\nhttps://aerotwist.com/blog/flip-your-animations/","import-map.json":"{\\r\\n  \\"imports\\": {\\r\\n    \\"lodash-es\\": \\"https://cdn.jsdelivr.net/npm/lodash-es/+esm\\"\\r\\n  }\\r\\n}\\r\\n"},"markdown":{"App":{"composition.js":"import { marked } from \'marked\'\\r\\nimport { debounce } from \'lodash-es\'\\r\\nimport { ref, computed } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const input = ref(\'# hello\')\\r\\n\\r\\n    const output = computed(() => marked(input.value))\\r\\n\\r\\n    const update = debounce((e) => {\\r\\n      input.value = e.target.value\\r\\n    }, 100)\\r\\n\\r\\n    return {\\r\\n      input,\\r\\n      output,\\r\\n      update\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import { marked } from \'marked\'\\r\\nimport { debounce } from \'lodash-es\'\\r\\n\\r\\nexport default {\\r\\n  data: () => ({\\r\\n    input: \'# hello\'\\r\\n  }),\\r\\n  computed: {\\r\\n    output() {\\r\\n      return marked(this.input)\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    update: debounce(function (e) {\\r\\n      this.input = e.target.value\\r\\n    }, 100)\\r\\n  }\\r\\n}\\r\\n","style.css":"body {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n.editor {\\r\\n  height: 100vh;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.input,\\r\\n.output {\\r\\n  overflow: auto;\\r\\n  width: 50%;\\r\\n  height: 100%;\\r\\n  box-sizing: border-box;\\r\\n  padding: 0 20px;\\r\\n}\\r\\n\\r\\n.input {\\r\\n  border: none;\\r\\n  border-right: 1px solid #ccc;\\r\\n  resize: none;\\r\\n  outline: none;\\r\\n  background-color: #f6f6f6;\\r\\n  font-size: 14px;\\r\\n  font-family: \'Monaco\', courier, monospace;\\r\\n  padding: 20px;\\r\\n}\\r\\n\\r\\ncode {\\r\\n  color: #f66;\\r\\n}\\r\\n","template.html":"<div class=\\"editor\\">\\r\\n  <textarea class=\\"input\\" :value=\\"input\\" @input=\\"update\\"></textarea>\\r\\n  <div class=\\"output\\" v-html=\\"output\\"></div>\\r\\n</div>\\r\\n"},"description.txt":"一个简单的 markdown 编辑器。","import-map.json":"{\\r\\n  \\"imports\\": {\\r\\n    \\"marked\\": \\"https://cdn.jsdelivr.net/npm/marked/+esm\\",\\r\\n    \\"lodash-es\\": \\"https://cdn.jsdelivr.net/npm/lodash-es/+esm\\"\\r\\n  }\\r\\n}\\r\\n"},"modal":{"App":{"composition.js":"import Modal from \'./Modal.vue\'\\r\\nimport { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    Modal\\r\\n  },\\r\\n  setup() {\\r\\n    const showModal = ref(false)\\r\\n\\r\\n    return {\\r\\n      showModal\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import Modal from \'./Modal.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    Modal\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      showModal: false\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<button id=\\"show-modal\\" @click=\\"showModal = true\\">Show Modal</button>\\r\\n\\r\\n<Teleport to=\\"body\\">\\r\\n  \x3c!-- 使用这个 modal 组件，传入 prop --\x3e\\r\\n  <modal :show=\\"showModal\\" @close=\\"showModal = false\\">\\r\\n    <template #header>\\r\\n      <h3>custom header</h3>\\r\\n    </template>\\r\\n  </modal>\\r\\n</Teleport>\\r\\n"},"description.txt":"可定制插槽和 CSS 过渡效果的模态框组件。","Modal":{"composition.js":"export default {\\r\\n  props: {\\r\\n    show: Boolean\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  props: {\\r\\n    show: Boolean\\r\\n  }\\r\\n}\\r\\n","style.css":".modal-mask {\\r\\n  position: fixed;\\r\\n  z-index: 9998;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  background-color: rgba(0, 0, 0, 0.5);\\r\\n  display: flex;\\r\\n  transition: opacity 0.3s ease;\\r\\n}\\r\\n\\r\\n.modal-container {\\r\\n  width: 300px;\\r\\n  margin: auto;\\r\\n  padding: 20px 30px;\\r\\n  background-color: #fff;\\r\\n  border-radius: 2px;\\r\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.33);\\r\\n  transition: all 0.3s ease;\\r\\n}\\r\\n\\r\\n.modal-header h3 {\\r\\n  margin-top: 0;\\r\\n  color: #42b983;\\r\\n}\\r\\n\\r\\n.modal-body {\\r\\n  margin: 20px 0;\\r\\n}\\r\\n\\r\\n.modal-default-button {\\r\\n  float: right;\\r\\n}\\r\\n\\r\\n/*\\r\\n * 对于 transition=\\"modal\\" 的元素来说\\r\\n * 当通过 Vue.js 切换它们的可见性时\\r\\n * 以下样式会被自动应用。\\r\\n *\\r\\n * 你可以简单地通过编辑这些样式\\r\\n * 来体验该模态框的过渡效果。\\r\\n */\\r\\n\\r\\n.modal-enter-from {\\r\\n  opacity: 0;\\r\\n}\\r\\n\\r\\n.modal-leave-to {\\r\\n  opacity: 0;\\r\\n}\\r\\n\\r\\n.modal-enter-from .modal-container,\\r\\n.modal-leave-to .modal-container {\\r\\n  -webkit-transform: scale(1.1);\\r\\n  transform: scale(1.1);\\r\\n}\\r\\n","template.html":"<Transition name=\\"modal\\">\\r\\n  <div v-if=\\"show\\" class=\\"modal-mask\\">\\r\\n    <div class=\\"modal-container\\">\\r\\n      <div class=\\"modal-header\\">\\r\\n        <slot name=\\"header\\">default header</slot>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\"modal-body\\">\\r\\n        <slot name=\\"body\\">default body</slot>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\"modal-footer\\">\\r\\n        <slot name=\\"footer\\">\\r\\n          default footer\\r\\n          <button\\r\\n            class=\\"modal-default-button\\"\\r\\n            @click=\\"$emit(\'close\')\\"\\r\\n          >OK</button>\\r\\n        </slot>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</Transition>\\r\\n"}},"simple-component":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\nimport TodoItem from \'./TodoItem.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    TodoItem\\r\\n  },\\r\\n  setup() {\\r\\n    const groceryList = ref([\\r\\n      { id: 0, text: \'Vegetables\' },\\r\\n      { id: 1, text: \'Cheese\' },\\r\\n      { id: 2, text: \'Whatever else humans are supposed to eat\' }\\r\\n    ])\\r\\n\\r\\n    return {\\r\\n      groceryList\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import TodoItem from \'./TodoItem.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    TodoItem\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      groceryList: [\\r\\n        { id: 0, text: \'Vegetables\' },\\r\\n        { id: 1, text: \'Cheese\' },\\r\\n        { id: 2, text: \'Whatever else humans are supposed to eat\' }\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<ol>\\r\\n  \x3c!--\\r\\n    我们给每个 todo 项提供它所表示的 todo 对象，\\r\\n    以便能够动态展示内容。\\r\\n    同时还需要给每个组件提供一个“key”，\\r\\n    这在指南的 v-for 部分有详细解释。\\r\\n  --\x3e\\r\\n  <TodoItem\\r\\n    v-for=\\"item in groceryList\\"\\r\\n    :todo=\\"item\\"\\r\\n    :key=\\"item.id\\"\\r\\n  ></TodoItem>\\r\\n</ol>\\n"},"description.txt":"这里展示了最简单的组件，它接收一个 prop 并渲染出来。\\r\\n在指南页面了解更多关于组件的内容！","TodoItem":{"composition.js":"export default {\\r\\n  props: {\\r\\n    todo: Object\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  props: {\\r\\n    todo: Object\\r\\n  }\\r\\n}\\r\\n","template.html":"<li>{{ todo.text }}</li>\\n"}},"svg":{"App":{"composition.js":"import PolyGraph from \'./PolyGraph.vue\'\\r\\nimport { ref, reactive } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    PolyGraph\\r\\n  },\\r\\n  setup() {\\r\\n    const newLabel = ref(\'\')\\r\\n    const stats = reactive([\\r\\n      { label: \'A\', value: 100 },\\r\\n      { label: \'B\', value: 100 },\\r\\n      { label: \'C\', value: 100 },\\r\\n      { label: \'D\', value: 100 },\\r\\n      { label: \'E\', value: 100 },\\r\\n      { label: \'F\', value: 100 }\\r\\n    ])\\r\\n\\r\\n    function add(e) {\\r\\n      e.preventDefault()\\r\\n      if (!newLabel.value) return\\r\\n      stats.push({\\r\\n        label: newLabel.value,\\r\\n        value: 100\\r\\n      })\\r\\n      newLabel.value = \'\'\\r\\n    }\\r\\n\\r\\n    function remove(stat) {\\r\\n      if (stats.length > 3) {\\r\\n        stats.splice(stats.indexOf(stat), 1)\\r\\n      } else {\\r\\n        alert(\\"Can\'t delete more!\\")\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      newLabel,\\r\\n      stats,\\r\\n      add,\\r\\n      remove\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import PolyGraph from \'./PolyGraph.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    PolyGraph\\r\\n  },\\r\\n  data: () => ({\\r\\n    newLabel: \'\',\\r\\n    stats: [\\r\\n      { label: \'A\', value: 100 },\\r\\n      { label: \'B\', value: 100 },\\r\\n      { label: \'C\', value: 100 },\\r\\n      { label: \'D\', value: 100 },\\r\\n      { label: \'E\', value: 100 },\\r\\n      { label: \'F\', value: 100 }\\r\\n    ]\\r\\n  }),\\r\\n  methods: {\\r\\n    add(e) {\\r\\n      e.preventDefault()\\r\\n      if (!this.newLabel) return\\r\\n      this.stats.push({\\r\\n        label: this.newLabel,\\r\\n        value: 100\\r\\n      })\\r\\n      this.newLabel = \'\'\\r\\n    },\\r\\n    remove(stat) {\\r\\n      if (this.stats.length > 3) {\\r\\n        this.stats.splice(this.stats.indexOf(stat), 1)\\r\\n      } else {\\r\\n        alert(\\"Can\'t delete more!\\")\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"polygon {\\r\\n  fill: #42b983;\\r\\n  opacity: 0.75;\\r\\n}\\r\\n\\r\\ncircle {\\r\\n  fill: transparent;\\r\\n  stroke: #999;\\r\\n}\\r\\n\\r\\ntext {\\r\\n  font-size: 10px;\\r\\n  fill: #666;\\r\\n}\\r\\n\\r\\nlabel {\\r\\n  display: inline-block;\\r\\n  margin-left: 10px;\\r\\n  width: 20px;\\r\\n}\\r\\n\\r\\n#raw {\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  left: 300px;\\r\\n}\\r\\n","template.html":"<svg width=\\"200\\" height=\\"200\\">\\r\\n  <PolyGraph :stats=\\"stats\\"></PolyGraph>\\r\\n</svg>\\r\\n\\r\\n\x3c!-- 控件 --\x3e\\r\\n<div v-for=\\"stat in stats\\">\\r\\n  <label>{{stat.label}}</label>\\r\\n  <input type=\\"range\\" v-model=\\"stat.value\\" min=\\"0\\" max=\\"100\\">\\r\\n  <span>{{stat.value}}</span>\\r\\n  <button @click=\\"remove(stat)\\" class=\\"remove\\">X</button>\\r\\n</div>\\r\\n\\r\\n<form id=\\"add\\">\\r\\n  <input name=\\"newlabel\\" v-model=\\"newLabel\\">\\r\\n  <button @click=\\"add\\">Add a Stat</button>\\r\\n</form>\\r\\n\\r\\n<pre id=\\"raw\\">{{ stats }}</pre>\\r\\n"},"AxisLabel":{"composition.js":"import { computed } from \'vue\'\\r\\nimport { valueToPoint } from \'./util.js\'\\r\\n\\r\\nexport default {\\r\\n  props: {\\r\\n    stat: Object,\\r\\n    index: Number,\\r\\n    total: Number\\r\\n  },\\r\\n  setup(props) {\\r\\n    const point = computed(() =>\\r\\n      valueToPoint(+props.stat.value + 10, props.index, props.total)\\r\\n    )\\r\\n\\r\\n    return {\\r\\n      point\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import { valueToPoint } from \'./util.js\'\\r\\n\\r\\nexport default {\\r\\n  props: {\\r\\n    stat: Object,\\r\\n    index: Number,\\r\\n    total: Number\\r\\n  },\\r\\n  computed: {\\r\\n    point: function () {\\r\\n      return valueToPoint(+this.stat.value + 10, this.index, this.total)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<text :x=\\"point.x\\" :y=\\"point.y\\">{{stat.label}}</text>\\r\\n"},"description.txt":"一个 SVG 图像\\r\\n","PolyGraph":{"composition.js":"import AxisLabel from \'./AxisLabel.vue\'\\r\\nimport { computed } from \'vue\'\\r\\nimport { valueToPoint } from \'./util.js\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    AxisLabel\\r\\n  },\\r\\n  props: {\\r\\n    stats: Array\\r\\n  },\\r\\n  setup(props) {\\r\\n    const points = computed(() => {\\r\\n      const total = props.stats.length\\r\\n      return props.stats\\r\\n        .map((stat, i) => {\\r\\n          const { x, y } = valueToPoint(stat.value, i, total)\\r\\n          return `${x},${y}`\\r\\n        })\\r\\n        .join(\' \')\\r\\n    })\\r\\n\\r\\n    return {\\r\\n      points\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import AxisLabel from \'./AxisLabel.vue\'\\r\\nimport { valueToPoint } from \'./util.js\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    AxisLabel\\r\\n  },\\r\\n  props: {\\r\\n    stats: Array\\r\\n  },\\r\\n  computed: {\\r\\n    // 一个用于多边形顶点的计算属性\\r\\n    points() {\\r\\n      const total = this.stats.length\\r\\n      return this.stats\\r\\n        .map((stat, i) => {\\r\\n          const { x, y } = valueToPoint(stat.value, i, total)\\r\\n          return `${x},${y}`\\r\\n        })\\r\\n        .join(\' \')\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<g>\\r\\n  <polygon :points=\\"points\\"></polygon>\\r\\n  <circle cx=\\"100\\" cy=\\"100\\" r=\\"80\\"></circle>\\r\\n  <axis-label\\r\\n    v-for=\\"(stat, index) in stats\\"\\r\\n    :stat=\\"stat\\"\\r\\n    :index=\\"index\\"\\r\\n    :total=\\"stats.length\\"\\r\\n  >\\r\\n  </axis-label>\\r\\n</g>\\r\\n"},"util.js":"export function valueToPoint(value, index, total) {\\r\\n  const x = 0\\r\\n  const y = -value * 0.8\\r\\n  const angle = ((Math.PI * 2) / total) * index\\r\\n  const cos = Math.cos(angle)\\r\\n  const sin = Math.sin(angle)\\r\\n  const tx = x * cos - y * sin + 100\\r\\n  const ty = x * sin + y * cos + 100\\r\\n  return {\\r\\n    x: tx,\\r\\n    y: ty\\r\\n  }\\r\\n}\\r\\n"},"temperature-converter":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const c = ref(0)\\r\\n    const f = ref(32)\\r\\n\\r\\n    function setC(e, v = +e.target.value) {\\r\\n      c.value = v\\r\\n      f.value = v * (9 / 5) + 32\\r\\n    }\\r\\n\\r\\n    function setF(e, v = +e.target.value) {\\r\\n      f.value = v\\r\\n      c.value = (v - 32) * (5 / 9)\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      c,\\r\\n      f,\\r\\n      setC,\\r\\n      setF\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      c: 0,\\r\\n      f: 32\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    setC(e, c = +e.target.value) {\\r\\n      this.c = c\\r\\n      this.f = c * (9 / 5) + 32\\r\\n    },\\r\\n    setF(e, f = +e.target.value) {\\r\\n      this.f = f\\r\\n      this.c = (f - 32) * (5 / 9)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<input type=\\"number\\" :value=\\"c\\" @change=\\"setC\\"> Celsius =\\r\\n<input type=\\"number\\" :value=\\"f\\" @change=\\"setF\\"> Fahrenheit\\r\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#temp"},"timer":{"App":{"composition.js":"import { ref, onUnmounted, computed } from \'vue\'\\r\\nexport default {\\r\\n  setup() {\\r\\n    const duration = ref(15 * 1000)\\r\\n    const elapsed = ref(0)\\r\\n\\r\\n    let lastTime\\r\\n    let handle\\r\\n\\r\\n    const update = () => {\\r\\n      elapsed.value = performance.now() - lastTime\\r\\n      if (elapsed.value >= duration.value) {\\r\\n        cancelAnimationFrame(handle)\\r\\n      } else {\\r\\n        handle = requestAnimationFrame(update)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    const reset = () => {\\r\\n      elapsed.value = 0\\r\\n      lastTime = performance.now()\\r\\n      update()\\r\\n    }\\r\\n\\r\\n    const progressRate = computed(() =>\\r\\n      Math.min(elapsed.value / duration.value, 1)\\r\\n    )\\r\\n\\r\\n    reset()\\r\\n\\r\\n    onUnmounted(() => {\\r\\n      cancelAnimationFrame(handle)\\r\\n    })\\r\\n    return {\\r\\n      duration,\\r\\n      elapsed,\\r\\n      progressRate,\\r\\n      reset\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      duration: 15 * 1000,\\r\\n      elapsed: 0\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.reset()\\r\\n  },\\r\\n  unmounted() {\\r\\n    cancelAnimationFrame(this.handle)\\r\\n  },\\r\\n  computed: {\\r\\n    progressRate() {\\r\\n      return Math.min(this.elapsed / this.duration, 1)\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    update() {\\r\\n      this.elapsed = performance.now() - this.lastTime\\r\\n      if (this.elapsed >= this.duration) {\\r\\n        cancelAnimationFrame(this.handle)\\r\\n      } else {\\r\\n        this.handle = requestAnimationFrame(this.update)\\r\\n      }\\r\\n    },\\r\\n    reset() {\\r\\n      this.elapsed = 0\\r\\n      this.lastTime = performance.now()\\r\\n      this.update()\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":".elapsed-container {\\r\\n  width: 300px;\\r\\n}\\r\\n\\r\\n.elapsed-bar {\\r\\n  background-color: red;\\r\\n  height: 10px;\\r\\n}\\n","template.html":"<label\\r\\n  >Elapsed Time: <progress :value=\\"progressRate\\"></progress\\r\\n></label>\\r\\n\\r\\n<div>{{ (elapsed / 1000).toFixed(1) }}s</div>\\r\\n\\r\\n<div>\\r\\n  Duration: <input type=\\"range\\" v-model=\\"duration\\" min=\\"1\\" max=\\"30000\\">\\r\\n  {{ (duration / 1000).toFixed(1) }}s\\r\\n</div>\\r\\n\\r\\n<button @click=\\"reset\\">Reset</button>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#timer"},"todomvc":{"App":{"composition.js":"import { ref, computed, watchEffect } from \'vue\'\\r\\n\\r\\nconst STORAGE_KEY = \'vue-todomvc\'\\r\\n\\r\\nconst filters = {\\r\\n  all: (todos) => todos,\\r\\n  active: (todos) => todos.filter((todo) => !todo.completed),\\r\\n  completed: (todos) => todos.filter((todo) => todo.completed)\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    // 状态\\r\\n    const todos = ref(JSON.parse(localStorage.getItem(STORAGE_KEY) || \'[]\'))\\r\\n    const visibility = ref(\'all\')\\r\\n    const editedTodo = ref()\\r\\n\\r\\n    // 获取的状态\\r\\n    const filteredTodos = computed(() => filters[visibility.value](todos.value))\\r\\n    const remaining = computed(() => filters.active(todos.value).length)\\r\\n\\r\\n    // 处理路由\\r\\n    window.addEventListener(\'hashchange\', onHashChange)\\r\\n    onHashChange()\\r\\n\\r\\n    // 状态持久化\\r\\n    watchEffect(() => {\\r\\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(todos.value))\\r\\n    })\\r\\n\\r\\n    function toggleAll(e) {\\r\\n      todos.value.forEach((todo) => (todo.completed = e.target.checked))\\r\\n    }\\r\\n\\r\\n    function addTodo(e) {\\r\\n      const value = e.target.value.trim()\\r\\n      if (value) {\\r\\n        todos.value.push({\\r\\n          id: Date.now(),\\r\\n          title: value,\\r\\n          completed: false\\r\\n        })\\r\\n        e.target.value = \'\'\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function removeTodo(todo) {\\r\\n      todos.value.splice(todos.value.indexOf(todo), 1)\\r\\n    }\\r\\n\\r\\n    let beforeEditCache = \'\'\\r\\n    function editTodo(todo) {\\r\\n      beforeEditCache = todo.title\\r\\n      editedTodo.value = todo\\r\\n    }\\r\\n\\r\\n    function cancelEdit(todo) {\\r\\n      editedTodo.value = null\\r\\n      todo.title = beforeEditCache\\r\\n    }\\r\\n\\r\\n    function doneEdit(todo) {\\r\\n      if (editedTodo.value) {\\r\\n        editedTodo.value = null\\r\\n        todo.title = todo.title.trim()\\r\\n        if (!todo.title) removeTodo(todo)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function removeCompleted() {\\r\\n      todos.value = filters.active(todos.value)\\r\\n    }\\r\\n\\r\\n    function onHashChange() {\\r\\n      const route = window.location.hash.replace(/#\\\\/?/, \'\')\\r\\n      if (filters[route]) {\\r\\n        visibility.value = route\\r\\n      } else {\\r\\n        window.location.hash = \'\'\\r\\n        visibility.value = \'all\'\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      todos,\\r\\n      visibility,\\r\\n      editedTodo,\\r\\n      filteredTodos,\\r\\n      remaining,\\r\\n      toggleAll,\\r\\n      addTodo,\\r\\n      removeTodo,\\r\\n      editTodo,\\r\\n      doneEdit,\\r\\n      cancelEdit,\\r\\n      removeCompleted,\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"const STORAGE_KEY = \'vue-todomvc\'\\r\\n\\r\\nconst filters = {\\r\\n  all: (todos) => todos,\\r\\n  active: (todos) => todos.filter((todo) => !todo.completed),\\r\\n  completed: (todos) => todos.filter((todo) => todo.completed)\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  // 初始化应用状态\\r\\n  data: () => ({\\r\\n    todos: JSON.parse(localStorage.getItem(STORAGE_KEY) || \'[]\'),\\r\\n    editedTodo: null,\\r\\n    visibility: \'all\'\\r\\n  }),\\r\\n\\r\\n  // 侦听 todos 的变化，以通过 localStorage 持久化\\r\\n  watch: {\\r\\n    todos: {\\r\\n      handler(todos) {\\r\\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(todos))\\r\\n      },\\r\\n      deep: true\\r\\n    }\\r\\n  },\\r\\n\\r\\n  mounted() {\\r\\n    window.addEventListener(\'hashchange\', this.onHashChange)\\r\\n    this.onHashChange()\\r\\n  },\\r\\n\\r\\n  computed: {\\r\\n    filteredTodos() {\\r\\n      return filters[this.visibility](this.todos)\\r\\n    },\\r\\n    remaining() {\\r\\n      return filters.active(this.todos).length\\r\\n    }\\r\\n  },\\r\\n\\r\\n  // 数据逻辑的方法实现。\\r\\n  // 注意这里没有 DOM 操作。\\r\\n  methods: {\\r\\n    toggleAll(e) {\\r\\n      this.todos.forEach((todo) => (todo.completed = e.target.checked))\\r\\n    },\\r\\n\\r\\n    addTodo(e) {\\r\\n      const value = e.target.value.trim()\\r\\n      if (!value) {\\r\\n        return\\r\\n      }\\r\\n      this.todos.push({\\r\\n        id: Date.now(),\\r\\n        title: value,\\r\\n        completed: false\\r\\n      })\\r\\n      e.target.value = \'\'\\r\\n    },\\r\\n\\r\\n    removeTodo(todo) {\\r\\n      this.todos.splice(this.todos.indexOf(todo), 1)\\r\\n    },\\r\\n\\r\\n    editTodo(todo) {\\r\\n      this.beforeEditCache = todo.title\\r\\n      this.editedTodo = todo\\r\\n    },\\r\\n\\r\\n    doneEdit(todo) {\\r\\n      if (!this.editedTodo) {\\r\\n        return\\r\\n      }\\r\\n      this.editedTodo = null\\r\\n      todo.title = todo.title.trim()\\r\\n      if (!todo.title) {\\r\\n        this.removeTodo(todo)\\r\\n      }\\r\\n    },\\r\\n\\r\\n    cancelEdit(todo) {\\r\\n      this.editedTodo = null\\r\\n      todo.title = this.beforeEditCache\\r\\n    },\\r\\n\\r\\n    removeCompleted() {\\r\\n      this.todos = filters.active(this.todos)\\r\\n    },\\r\\n\\r\\n    onHashChange() {\\r\\n      var visibility = window.location.hash.replace(/#\\\\/?/, \'\')\\r\\n      if (filters[visibility]) {\\r\\n        this.visibility = visibility\\r\\n      } else {\\r\\n        window.location.hash = \'\'\\r\\n        this.visibility = \'all\'\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"@import \\"https://unpkg.com/todomvc-app-css@2.4.1/index.css\\";\\n","template.html":"<section class=\\"todoapp\\">\\r\\n  <header class=\\"header\\">\\r\\n    <h1>todos</h1>\\r\\n    <input\\r\\n      class=\\"new-todo\\"\\r\\n      autofocus\\r\\n      placeholder=\\"What needs to be done?\\"\\r\\n      @keyup.enter=\\"addTodo\\"\\r\\n    >\\r\\n  </header>\\r\\n  <section class=\\"main\\" v-show=\\"todos.length\\">\\r\\n    <input\\r\\n      id=\\"toggle-all\\"\\r\\n      class=\\"toggle-all\\"\\r\\n      type=\\"checkbox\\"\\r\\n      :checked=\\"remaining === 0\\"\\r\\n      @change=\\"toggleAll\\"\\r\\n    >\\r\\n    <label for=\\"toggle-all\\">Mark all as complete</label>\\r\\n    <ul class=\\"todo-list\\">\\r\\n      <li\\r\\n        v-for=\\"todo in filteredTodos\\"\\r\\n        class=\\"todo\\"\\r\\n        :key=\\"todo.id\\"\\r\\n        :class=\\"{ completed: todo.completed, editing: todo === editedTodo }\\"\\r\\n      >\\r\\n        <div class=\\"view\\">\\r\\n          <input class=\\"toggle\\" type=\\"checkbox\\" v-model=\\"todo.completed\\">\\r\\n          <label @dblclick=\\"editTodo(todo)\\">{{ todo.title }}</label>\\r\\n          <button class=\\"destroy\\" @click=\\"removeTodo(todo)\\"></button>\\r\\n        </div>\\r\\n        <input\\r\\n          v-if=\\"todo === editedTodo\\"\\r\\n          class=\\"edit\\"\\r\\n          type=\\"text\\"\\r\\n          v-model=\\"todo.title\\"\\r\\n          @vue:mounted=\\"({ el }) => el.focus()\\"\\r\\n          @blur=\\"doneEdit(todo)\\"\\r\\n          @keyup.enter=\\"doneEdit(todo)\\"\\r\\n          @keyup.escape=\\"cancelEdit(todo)\\"\\r\\n        >\\r\\n      </li>\\r\\n    </ul>\\r\\n  </section>\\r\\n  <footer class=\\"footer\\" v-show=\\"todos.length\\">\\r\\n    <span class=\\"todo-count\\">\\r\\n      <strong>{{ remaining }}</strong>\\r\\n      <span>{{ remaining === 1 ? \' item\' : \' items\' }} left</span>\\r\\n    </span>\\r\\n    <ul class=\\"filters\\">\\r\\n      <li>\\r\\n        <a href=\\"#/all\\" :class=\\"{ selected: visibility === \'all\' }\\">All</a>\\r\\n      </li>\\r\\n      <li>\\r\\n        <a href=\\"#/active\\" :class=\\"{ selected: visibility === \'active\' }\\">Active</a>\\r\\n      </li>\\r\\n      <li>\\r\\n        <a href=\\"#/completed\\" :class=\\"{ selected: visibility === \'completed\' }\\">Completed</a>\\r\\n      </li>\\r\\n    </ul>\\r\\n    <button class=\\"clear-completed\\" @click=\\"removeCompleted\\" v-show=\\"todos.length > remaining\\">\\r\\n      Clear completed\\r\\n    </button>\\r\\n  </footer>\\r\\n</section>\\r\\n"},"description.txt":"一个完全标准的 TodoMVC 实现\\r\\nhttps://todomvc.com/\\r\\n"},"tree":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\nimport TreeItem from \'./TreeItem.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    TreeItem\\r\\n  },\\r\\n  setup() {\\r\\n    const treeData = ref({\\r\\n      name: \'My Tree\',\\r\\n      children: [\\r\\n        { name: \'hello\' },\\r\\n        { name: \'world\' },\\r\\n        {\\r\\n          name: \'child folder\',\\r\\n          children: [\\r\\n            {\\r\\n              name: \'child folder\',\\r\\n              children: [{ name: \'hello\' }, { name: \'world\' }]\\r\\n            },\\r\\n            { name: \'hello\' },\\r\\n            { name: \'world\' },\\r\\n            {\\r\\n              name: \'child folder\',\\r\\n              children: [{ name: \'hello\' }, { name: \'world\' }]\\r\\n            }\\r\\n          ]\\r\\n        }\\r\\n      ]\\r\\n    })\\r\\n\\r\\n    return {\\r\\n      treeData\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import TreeItem from \'./TreeItem.vue\'\\r\\n\\r\\nconst treeData = {\\r\\n  name: \'My Tree\',\\r\\n  children: [\\r\\n    { name: \'hello\' },\\r\\n    { name: \'wat\' },\\r\\n    {\\r\\n      name: \'child folder\',\\r\\n      children: [\\r\\n        {\\r\\n          name: \'child folder\',\\r\\n          children: [{ name: \'hello\' }, { name: \'wat\' }]\\r\\n        },\\r\\n        { name: \'hello\' },\\r\\n        { name: \'wat\' },\\r\\n        {\\r\\n          name: \'child folder\',\\r\\n          children: [{ name: \'hello\' }, { name: \'wat\' }]\\r\\n        }\\r\\n      ]\\r\\n    }\\r\\n  ]\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    TreeItem\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      treeData\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":".item {\\r\\n  cursor: pointer;\\r\\n  line-height: 1.5;\\r\\n}\\r\\n.bold {\\r\\n  font-weight: bold;\\r\\n}\\n","template.html":"<ul>\\r\\n  <TreeItem class=\\"item\\" :model=\\"treeData\\"></TreeItem>\\r\\n</ul>\\r\\n"},"description.txt":"一个可以递归渲染自己的嵌套树组件。\\r\\n你可以双击一个项目将其转变为一个文件夹。","TreeItem":{"composition.js":"import { ref, computed } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  name: \'TreeItem\', // 在引用自身的时候是必须的\\r\\n  props: {\\r\\n    model: Object\\r\\n  },\\r\\n  setup(props) {\\r\\n    const isOpen = ref(false)\\r\\n    const isFolder = computed(() => {\\r\\n      return props.model.children && props.model.children.length\\r\\n    })\\r\\n\\r\\n    function toggle() {\\r\\n      isOpen.value = !isOpen.value\\r\\n    }\\r\\n\\r\\n    function changeType() {\\r\\n      if (!isFolder.value) {\\r\\n        props.model.children = []\\r\\n        addChild()\\r\\n        isOpen.value = true\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function addChild() {\\r\\n      props.model.children.push({ name: \'new stuff\' })\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      isOpen,\\r\\n      isFolder,\\r\\n      toggle,\\r\\n      changeType,\\r\\n      addChild\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  name: \'TreeItem\', // 在引用自身的时候是必须的\\r\\n  props: {\\r\\n    model: Object\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      isOpen: false\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    isFolder() {\\r\\n      return this.model.children && this.model.children.length\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    toggle() {\\r\\n      if (this.isFolder) {\\r\\n        this.isOpen = !this.isOpen\\r\\n      }\\r\\n    },\\r\\n    changeType() {\\r\\n      if (!this.isFolder) {\\r\\n        this.model.children = []\\r\\n        this.addChild()\\r\\n        this.isOpen = true\\r\\n      }\\r\\n    },\\r\\n    addChild() {\\r\\n      this.model.children.push({\\r\\n        name: \'new stuff\'\\r\\n      })\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<li>\\r\\n  <div\\r\\n    :class=\\"{ bold: isFolder }\\"\\r\\n    @click=\\"toggle\\"\\r\\n    @dblclick=\\"changeType\\">\\r\\n    {{ model.name }}\\r\\n    <span v-if=\\"isFolder\\">[{{ isOpen ? \'-\' : \'+\' }}]</span>\\r\\n  </div>\\r\\n  <ul v-show=\\"isOpen\\" v-if=\\"isFolder\\">\\r\\n    \x3c!--\\r\\n      一个可以通过其“name”选项递归渲染自己的组件，\\r\\n      (如果使用单文件组件，则从文件名推断)\\r\\n    --\x3e\\r\\n    <TreeItem\\r\\n      class=\\"item\\"\\r\\n      v-for=\\"model in model.children\\"\\r\\n      :model=\\"model\\">\\r\\n    </TreeItem>\\r\\n    <li class=\\"add\\" @click=\\"addChild\\">+</li>\\r\\n  </ul>\\r\\n</li>\\n"}}}'),b=i({__name:"ExampleRepl",setup(i){const b=new r({defaultVueRuntimeURL:`https://unpkg.com/vue@${l}/dist/vue.esm-browser.js`}),x=a("prefer-composition"),y=a("prefer-sfc");function k(){let r=location.hash.slice(1);g.hasOwnProperty(r)||(r="hello-world",location.hash=`#${r}`),b.setFiles(y.value?e(g[r],x.value):t(g[r],x.value),y.value?"App.vue":"index.html")}d(k,{onTrigger(r){console.log(r)}}),n(k);const w=c();return u((()=>{const r=()=>{w.value.style.setProperty("--vh",window.innerHeight+"px")};r(),window.addEventListener("resize",r),p((()=>{window.removeEventListener("resize",r)}))})),(r,n)=>(m(),h("div",{ref_key:"heightProvider",ref:w},[f(v(s),{editor:v(o),store:v(b),showImportMap:!v(y),showCompileOutput:!1,clearConsole:!1},null,8,["editor","store","showImportMap"])],512))}});export{b as default};
