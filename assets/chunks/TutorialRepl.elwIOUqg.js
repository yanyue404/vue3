import{R as s,o as i,_ as n,b as a,r as t,a as e}from"./utils.D6g6xS_A.js";import{P as p,_ as l,a as h}from"./PreferenceSwitch.p4yVISKz.js";import{V as r}from"./VTIconChevronLeft.eio_VcVQ.js";import{g as d,am as k,r as o,Y as E,h as c,A as g,o as y,c as u,e as m,j as v,w as C,F,u as f,D as b,t as A,d as D,i as x,l as B,k as j,a1 as T,_ as w}from"./framework.eLjRmN09.js";import"./VPApp.vue_vue_type_style_index_0_scoped_dd5db050_lang.d8Xe0uuv.js";import{_}from"./VTLink.vue_vue_type_script_setup_true_lang.fLW4ej0d.js";const S=JSON.parse('{"step-1":{"App":{"template.html":"<h1>Hello World!</h1>\\r\\n"},"description.md":"<h1 id=\\"getting-started\\" tabindex=\\"-1\\">开始 <a class=\\"header-anchor\\" href=\\"#getting-started\\" aria-label=\\"Permalink to &quot;开始 {#getting-started}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>欢迎来到 Vue 互动教程！</p>\\n<p>本教程的目标是让你在浏览器中快速体验使用 Vue 是什么感受，因此它不会太过深入解释所有细节，如果有些东西你一时无法完全理解，也不必担心。但是，在完成本教程之后，请务必阅读<a target=\\"_blank\\" href=\\"/guide/introduction.html\\">深入指南</a>，以确保你对涉及的话题有更深入、完整的理解。</p>\\n<h2 id=\\"prerequisites\\" tabindex=\\"-1\\">前置要求 <a class=\\"header-anchor\\" href=\\"#prerequisites\\" aria-label=\\"Permalink to &quot;前置要求 {#prerequisites}&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>本教程假定你基本熟悉 HTML、CSS 和 JavaScript。对于前端开发来说，一个完全的新手也许并不适合上手就学习框架——最好是掌握了基础知识再回来。其他框架的经验会有所帮助，但并不是必需的。</p>\\n<h2 id=\\"how-to-use-this-tutorial\\" tabindex=\\"-1\\">如何使用本教程 <a class=\\"header-anchor\\" href=\\"#how-to-use-this-tutorial\\" aria-label=\\"Permalink to &quot;如何使用本教程 {#how-to-use-this-tutorial}&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>你可以编辑<span class=\\"wide\\">右侧</span><span class=\\"narrow\\">上方</span>的代码，并立即看到结果更新。教程每一步都会介绍一个 Vue 的核心功能，并期望你能够补全代码，让 demo 运行起来。如果你卡住了，会有一个“看答案！”按钮，点击它，会为你揭晓能够运行的代码。试着不要太依赖该按钮——自己解决会学得更快。</p>\\n<p>如果你是一名来自 Vue 2 或其他框架的资深开发者，你可以调整一些设置来充分使用本教程。如果你是一名初学者，推荐使用默认设置进行学习。</p>\\n<details>\\n<summary>教程设置详情</summary>\\n<ul>\\n<li>\\n<p>Vue 提供了两种 API 风格：选项式 API 和组合式 API。本教程两者都支持——你可以使用顶部的 <strong>API 风格偏好</strong>来选择你喜欢的风格。<a target=\\"_blank\\" href=\\"/guide/introduction.html#api-styles\\">了解更多有关 API 风格的信息</a>。</p>\\n</li>\\n<li>\\n<p>你也可以在 SFC 模式和 HTML 模式之间切换。前者会以<a target=\\"_blank\\" href=\\"/guide/introduction.html#single-file-components\\">单文件组件</a> (SFC) 的格式展示示例代码，这是大多数开发者配合构建步骤使用 Vue 的模式。HTML 模式则在无需构建步骤时使用。</p>\\n</li>\\n</ul>\\n</details>\\n<p>准备好了吗？点击“下一步”按钮开始吧。</p>\\n"},"step-10":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const todoId = ref(1)\\r\\n    const todoData = ref(null)\\r\\n\\r\\n    async function fetchData() {\\r\\n      todoData.value = null\\r\\n      const res = await fetch(\\r\\n        `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\\r\\n      )\\r\\n      todoData.value = await res.json()\\r\\n    }\\r\\n\\r\\n    fetchData()\\r\\n\\r\\n    return {\\r\\n      todoId,\\r\\n      todoData\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      todoId: 1,\\r\\n      todoData: null\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    async fetchData() {\\r\\n      this.todoData = null\\r\\n      const res = await fetch(\\r\\n        `https://jsonplaceholder.typicode.com/todos/${this.todoId}`\\r\\n      )\\r\\n      this.todoData = await res.json()\\r\\n    }\\r\\n  },\\r\\n  mounted() {\\r\\n    this.fetchData()\\r\\n  }\\r\\n}\\r\\n","template.html":"<p>Todo id: {{ todoId }}</p>\\r\\n<button @click=\\"todoId++\\" :disabled=\\"!todoData\\">Fetch next todo</button>\\r\\n<p v-if=\\"!todoData\\">Loading...</p>\\r\\n<pre v-else>{{ todoData }}</pre>\\r\\n"},"description.md":"<h1 id=\\"watchers\\" tabindex=\\"-1\\">侦听器 <a class=\\"header-anchor\\" href=\\"#watchers\\" aria-label=\\"Permalink to &quot;侦听器 {#watchers}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>有时我们需要响应性地执行一些“副作用”——例如，当一个数字改变时将其输出到控制台。我们可以通过侦听器来实现它：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ref, watch } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'vue\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">watch</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(count, (</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">newCount</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // 没错，console.log() 是一个副作用</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">`new count is: ${</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">newCount</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">}`</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div><p><code>watch()</code> 可以直接侦听一个 ref，并且只要 <code>count</code> 的值改变就会触发回调。<code>watch()</code> 也可以侦听其他类型的数据源——更多详情请参阅<a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">指南 - 侦听器</a>。</p>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  watch: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    count</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">newCount</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // 没错，console.log() 是一个副作用</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">`new count is: ${</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">newCount</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">}`</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>这里，我们使用 <code>watch</code> 选项来侦听 <code>count</code> 属性的变化。当 <code>count</code> 改变时，侦听回调将被调用，并且接收新值作为参数。更多详情请参阅<a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">指南 - 侦听器</a>。</p>\\n</div>\\n<p>一个比在控制台输出更加实际的例子是当 ID 改变时抓取新的数据。在右边的例子中就是这样一个组件。该组件被挂载时，会从模拟 API 中抓取 todo 数据，同时还有一个按钮可以改变要抓取的 todo 的 ID。现在，尝试实现一个侦听器，使得组件能够在按钮被点击时抓取新的 todo 项目。</p>\\n","_hint":{"App":{"composition.js":"import { ref, watch } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const todoId = ref(1)\\r\\n    const todoData = ref(null)\\r\\n\\r\\n    async function fetchData() {\\r\\n      todoData.value = null\\r\\n      const res = await fetch(\\r\\n        `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\\r\\n      )\\r\\n      todoData.value = await res.json()\\r\\n    }\\r\\n\\r\\n    fetchData()\\r\\n\\r\\n    watch(todoId, fetchData)\\r\\n\\r\\n    return {\\r\\n      todoId,\\r\\n      todoData\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      todoId: 1,\\r\\n      todoData: null\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    async fetchData() {\\r\\n      this.todoData = null\\r\\n      const res = await fetch(\\r\\n        `https://jsonplaceholder.typicode.com/todos/${this.todoId}`\\r\\n      )\\r\\n      this.todoData = await res.json()\\r\\n    }\\r\\n  },\\r\\n  mounted() {\\r\\n    this.fetchData()\\r\\n  },\\r\\n  watch: {\\r\\n    todoId() {\\r\\n      this.fetchData()\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<p>Todo id: {{ todoId }}</p>\\r\\n<button @click=\\"todoId++\\" :disabled=\\"!todoData\\">Fetch next todo</button>\\r\\n<p v-if=\\"!todoData\\">Loading...</p>\\r\\n<pre v-else>{{ todoData }}</pre>\\r\\n"},"description.md":{}}},"step-11":{"App":{"composition.js":"export default {\\r\\n  // register component\\r\\n}\\r\\n","options.js":"export default {\\r\\n  // register child component\\r\\n}\\r\\n","template.html":"\x3c!-- render child component --\x3e\\r\\n"},"ChildComp":{"template.html":"<h2>A Child Component!</h2>\\r\\n"},"description.md":"<h1 id=\\"components\\" tabindex=\\"-1\\">组件 <a class=\\"header-anchor\\" href=\\"#components\\" aria-label=\\"Permalink to &quot;组件 {#components}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>目前为止，我们只使用了单个组件。真正的 Vue 应用往往是由嵌套组件创建的。</p>\\n<p>父组件可以在模板中渲染另一个组件作为子组件。要使用子组件，我们需要先导入它：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ChildComp </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'./ChildComp.vue\'</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ChildComp </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'./ChildComp.vue\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  components: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>我们还需要使用 <code>components</code> 选项注册组件。这里我们使用对象属性的简写形式在 <code>ChildComp</code> 键下注册 <code>ChildComp</code> 组件。</p>\\n</div>\\n</div>\\n<div class=\\"sfc\\">\\n<p>然后我们就可以在模板中使用组件，就像这样：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> /></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ChildComp </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'./ChildComp.js\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  components: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div><p>我们还需要使用 <code>components</code> 选项注册组件。这里我们使用对象属性的简写形式在 <code>ChildComp</code> 键下注册 <code>ChildComp</code> 组件。</p>\\n<p>因为我们是在 DOM 中编写模板语法，因此需要遵循浏览器的大小写敏感的标签解析规则。所以，我们需要使用 kebab-case 的名字来引用子组件：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>现在自己尝试一下——导入子组件并在模板中渲染它。</p>\\n","_hint":{"App":{"composition.js":"import ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  }\\r\\n}\\r\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  }\\r\\n}\\r\\n","template.html":"<ChildComp />\\r\\n"},"ChildComp":{"template.html":"<h2>A Child Component!</h2>\\r\\n"},"description.md":{}}},"step-12":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\nimport ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  setup() {\\r\\n    const greeting = ref(\'Hello from parent\')\\r\\n\\r\\n    return {\\r\\n      greeting\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      greeting: \'Hello from parent\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<ChildComp />\\r\\n"},"ChildComp":{"composition.js":"export default {\\r\\n  props: {\\r\\n    msg: String\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  props: {\\r\\n    msg: String\\r\\n  }\\r\\n}\\r\\n","template.html":"<h2>{{ msg || \'No props passed yet\' }}</h2>\\r\\n"},"description.md":"<h1 id=\\"props\\" tabindex=\\"-1\\">Props <a class=\\"header-anchor\\" href=\\"#props\\" aria-label=\\"Permalink to &quot;Props {#props}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>子组件可以通过 <strong>props</strong> 从父组件接受动态数据。首先，需要声明它所接受的 props：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">vue</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">&#x3C;!-- ChildComp.vue --\x3e</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> props</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> defineProps</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  msg: String</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>注意 <code>defineProps()</code> 是一个编译时宏，并不需要导入。一旦声明，<code>msg</code> prop 就可以在子组件的模板中使用。它也可以通过 <code>defineProps()</code> 所返回的对象在 JavaScript 中访问。</p>\\n</div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 在子组件中</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  props: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    msg: String</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">props</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // 访问 props.msg</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>一旦声明，<code>msg</code> prop 就会暴露在 <code>this</code> 上，并可以在子组件的模板中使用。接收到的 props 会作为第一个参数传递给 <code>setup()</code>。</p>\\n</div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 在子组件中</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  props: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    msg: String</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>一旦声明，<code>msg</code> prop 就会暴露在 <code>this</code> 上，并可以在子组件的模板中使用。</p>\\n</div>\\n<p>父组件可以像声明 HTML attributes 一样传递 props。若要传递动态值，也可以使用 <code>v-bind</code> 语法：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">msg</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">greeting</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> /></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">msg</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">greeting</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>现在在编辑器中自己尝试一下吧。</p>\\n","_hint":{"App":{"template.html":"<ChildComp :msg=\\"greeting\\" />\\r\\n","composition.js":"import { ref } from \'vue\'\\r\\nimport ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  setup() {\\r\\n    const greeting = ref(\'Hello from parent\')\\r\\n\\r\\n    return {\\r\\n      greeting\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      greeting: \'Hello from parent\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n"},"ChildComp":{"composition.js":"export default {\\r\\n  props: {\\r\\n    msg: String\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  props: {\\r\\n    msg: String\\r\\n  }\\r\\n}\\r\\n","template.html":"<h2>{{ msg || \'No props passed yet\' }}</h2>\\r\\n"},"description.md":{}}},"step-13":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\nimport ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  setup() {\\r\\n    const childMsg = ref(\'No child msg yet\')\\r\\n\\r\\n    return {\\r\\n      childMsg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      childMsg: \'No child msg yet\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<ChildComp />\\r\\n<p>{{ childMsg }}</p>\\r\\n"},"ChildComp":{"composition.js":"export default {\\r\\n  emits: [\'response\'],\\r\\n  setup(props, { emit }) {\\r\\n    emit(\'response\', \'hello from child\')\\r\\n    return {}\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  emits: [\'response\'],\\r\\n  created() {\\r\\n    this.$emit(\'response\', \'hello from child\')\\r\\n  }\\r\\n}\\r\\n","template.html":"<h2>Child component</h2>\\r\\n"},"description.md":"<h1 id=\\"emits\\" tabindex=\\"-1\\">Emits <a class=\\"header-anchor\\" href=\\"#emits\\" aria-label=\\"Permalink to &quot;Emits {#emits}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>除了接收 props，子组件还可以向父组件触发事件：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">vue</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 声明触发的事件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> emit</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> defineEmits</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">([</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'response\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 带参数触发</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">emit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'response\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'hello from child\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // 声明触发的事件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  emits: [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'response\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">props</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, { </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">emit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> }) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // 带参数触发</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    emit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'response\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'hello from child\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // 声明触发的事件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  emits: [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'response\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  created</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // 带参数触发</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">    this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$emit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'response\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'hello from child\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<p><span class=\\"options-api\\"><code>this.$emit()</code></span><span class=\\"composition-api\\"><code>emit()</code></span> 的第一个参数是事件的名称。其他所有参数都将传递给事件监听器。</p>\\n<p>父组件可以使用 <code>v-on</code> 监听子组件触发的事件——这里的处理函数接收了子组件触发事件时的额外参数并将它赋值给了本地状态：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> @</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">response</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">msg</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> childMsg </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> msg</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> /></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> @</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">response</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">msg</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> childMsg </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> msg</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>现在在编辑器中自己尝试一下吧。</p>\\n","_hint":{"App":{"template.html":"<ChildComp @response=\\"(msg) => childMsg = msg\\" />\\r\\n<p>{{ childMsg }}</p>\\r\\n","composition.js":"import { ref } from \'vue\'\\r\\nimport ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  setup() {\\r\\n    const childMsg = ref(\'No child msg yet\')\\r\\n\\r\\n    return {\\r\\n      childMsg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      childMsg: \'No child msg yet\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n"},"ChildComp":{"composition.js":"export default {\\r\\n  emits: [\'response\'],\\r\\n  setup(props, { emit }) {\\r\\n    emit(\'response\', \'hello from child\')\\r\\n    return {}\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  emits: [\'response\'],\\r\\n  created() {\\r\\n    this.$emit(\'response\', \'hello from child\')\\r\\n  }\\r\\n}\\r\\n","template.html":"<h2>Child component</h2>\\r\\n"},"description.md":{}}},"step-14":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\nimport ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  setup() {\\r\\n    const msg = ref(\'from parent\')\\r\\n\\r\\n    return {\\r\\n      msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      msg: \'from parent\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<ChildComp></ChildComp>\\r\\n"},"ChildComp":{"template.html":"<slot>Fallback content</slot>\\r\\n"},"description.md":"<h1 id=\\"slots\\" tabindex=\\"-1\\">插槽 <a class=\\"header-anchor\\" href=\\"#slots\\" aria-label=\\"Permalink to &quot;插槽 {#slots}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>除了通过 props 传递数据外，父组件还可以通过<strong>插槽</strong> (slots) 将模板片段传递给子组件：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  This is some slot content!</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  This is some slot content!</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>在子组件中，可以使用 <code>&lt;slot&gt;</code> 元素作为插槽出口 (slot outlet) 渲染父组件中的插槽内容 (slot content)：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">&#x3C;!-- 在子组件的模板中 --\x3e</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">/></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">&#x3C;!-- 在子组件的模板中 --\x3e</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p><code>&lt;slot&gt;</code> 插口中的内容将被当作“默认”内容：它会在父组件没有传递任何插槽内容时显示：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>Fallback content&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>现在我们没有给 <code>&lt;ChildComp&gt;</code> 传递任何插槽内容，所以你将看到默认内容。让我们利用父组件的 <code>msg</code> 状态为子组件提供一些插槽内容吧。</p>\\n","_hint":{"App":{"template.html":"<ChildComp>Message: {{ msg }}</ChildComp>\\r\\n","composition.js":"import { ref } from \'vue\'\\r\\nimport ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  setup() {\\r\\n    const msg = ref(\'from parent\')\\r\\n\\r\\n    return {\\r\\n      msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\r\\n\\r\\nexport default {\\r\\n  components: {\\r\\n    ChildComp\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      msg: \'from parent\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n"},"ChildComp":{"template.html":"<slot>Fallback content</slot>\\r\\n"},"description.md":{}}},"step-15":{"App":{"composition.js":"import JSConfetti from \'js-confetti\'\\r\\n\\r\\nconst confetti = new JSConfetti()\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    function showConfetti() {\\r\\n      confetti.addConfetti()\\r\\n    }\\r\\n\\r\\n    showConfetti()\\r\\n\\r\\n    return {\\r\\n      showConfetti\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"import JSConfetti from \'js-confetti\'\\r\\n\\r\\nconst confetti = new JSConfetti()\\r\\n\\r\\nexport default {\\r\\n  mounted() {\\r\\n    this.showConfetti()\\r\\n  },\\r\\n  methods: {\\r\\n    showConfetti() {\\r\\n      confetti.addConfetti()\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":"h1 {\\r\\n  text-align: center;\\r\\n  cursor: pointer;\\r\\n  margin-top: 3em;\\r\\n}\\r\\n","template.html":"<h1 @click=\\"showConfetti\\">🎉 Congratulations!</h1>\\r\\n"},"description.md":"<h1 id=\\"you-did-it\\" tabindex=\\"-1\\">你做到了！ <a class=\\"header-anchor\\" href=\\"#you-did-it\\" aria-label=\\"Permalink to &quot;你做到了！ {#you-did-it}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>你已经完成了整个教程！</p>\\n<p>现在，你应该大致明白使用 Vue 开发应用是怎样的感觉了。虽然我们飞快地介绍了许多东西，但也因此忽略了大量的细节，所以千万别这样就满足了！接下来，你可以：</p>\\n<ul>\\n<li>\\n<p>参考<a href=\\"/guide/quick-start.html\\">快速上手</a>，在你的机器上创建一个真实的 Vue 项目。</p>\\n</li>\\n<li>\\n<p>阅读<a href=\\"/guide/essentials/application.html\\">深入指南</a>——它更详细地探讨了我们目前学过的所有话题，并且还有许多其他更深入的内容。</p>\\n</li>\\n<li>\\n<p>查看一些更加实际的<a href=\\"/examples/\\">示例</a>。</p>\\n</li>\\n</ul>\\n<p>我们很期待看到你能用 Vue 打造出怎样的作品，加油！</p>\\n","import-map.json":"{\\r\\n  \\"imports\\": {\\r\\n    \\"js-confetti\\": \\"https://cdn.jsdelivr.net/npm/js-confetti/+esm\\"\\r\\n  }\\r\\n}\\r\\n"},"step-2":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    // 组件逻辑\\r\\n    // 此处声明一些响应式状态\\r\\n\\r\\n    return {\\r\\n      // 暴露给模板\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  // 组件选项\\r\\n  // 此处声明一些响应式状态\\r\\n}\\r\\n","template.html":"<h1>Make me dynamic!</h1>\\r\\n"},"description.md":"<h1 id=\\"declarative-rendering\\" tabindex=\\"-1\\">声明式渲染 <a class=\\"header-anchor\\" href=\\"#declarative-rendering\\" aria-label=\\"Permalink to &quot;声明式渲染 {#declarative-rendering}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<div class=\\"sfc\\">\\n<p>你在编辑器中看到的是一个 Vue 单文件组件 (Single-File Component，缩写为 SFC)。SFC 是一种可复用的代码组织形式，它将从属于同一个组件的 HTML、CSS 和 JavaScript 封装在使用 <code>.vue</code> 后缀的文件中。</p>\\n</div>\\n<p>Vue 的核心功能是<strong>声明式渲染</strong>：通过扩展于标准 HTML 的模板语法，我们可以根据 JavaScript 的状态来描述 HTML 应该是什么样子的。当状态改变时，HTML 会自动更新。</p>\\n<div class=\\"composition-api\\">\\n<p>能在改变时触发更新的状态被称作是<strong>响应式</strong>的。我们可以使用 Vue 的 <code>reactive()</code> API 来声明响应式状态。由 <code>reactive()</code> 创建的对象都是 JavaScript <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\\" target=\\"_blank\\" rel=\\"noreferrer\\">Proxy</a>，其行为与普通对象一样：</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { reactive } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'vue\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> counter</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> reactive</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(counter.count) </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">counter.count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span></code></pre>\\n</div><p><code>reactive()</code> 只适用于对象 (包括数组和内置类型，如 <code>Map</code> 和 <code>Set</code>)。而另一个 API <code>ref()</code> 则可以接受任何值类型。<code>ref</code> 会返回一个包裹对象，并在 <code>.value</code> 属性下暴露内部值。</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ref } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'vue\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> message</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'Hello World!\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(message.value) </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// \\"Hello World!\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">message.value </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'Changed\'</span></span></code></pre>\\n</div><p><code>reactive()</code> 和 <code>ref()</code> 的细节在<a target=\\"_blank\\" href=\\"/guide/essentials/reactivity-fundamentals.html\\">指南 - 响应式基础</a>一节中有进一步讨论。</p>\\n<div class=\\"sfc\\">\\n<p>在组件的 <code>&lt;script setup&gt;</code> 块中声明的响应式状态，可以直接在模板中使用。下面展示了我们如何使用双花括号语法，根据 <code>counter</code> 对象和 <code>message</code> ref 的值渲染动态文本：</p>\\n</div>\\n<div class=\\"html\\">\\n<p>传入 <code>createApp()</code> 的对象是一个 Vue 组件。组件的状态应该在 <code>setup()</code> 函数中声明，并使用一个对象返回。</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> counter</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> reactive</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({ count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> })</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> message</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'Hello World!\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    counter,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    message</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>返回对象中的属性可以在模板中使用。下面展示了我们如何使用双花括号语法，根据 <code>message</code> 的值来渲染动态文本：</p>\\n</div>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ message }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>count is: {{ counter.count }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>注意我们在模板中访问的 <code>message</code> ref 时不需要使用 <code>.value</code>：它会被自动解包，让使用更简单。</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>能在改变时触发更新的状态被认为是<strong>响应式</strong>的。在 Vue 中，响应式状态被保存在组件中。<span class=\\"html\\">在示例代码中，传递给 <code>createApp()</code> 的对象是一个组件。</span></p>\\n<p>我们可以使用 <code>data</code> 组件选项来声明响应式状态，该选项应该是一个返回对象的函数：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      message: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'Hello World!\'</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      message: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'Hello World!\'</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n<p><code>message</code> 属性可以在模板中使用。下面展示了我们如何使用双花括号法，根据 <code>message</code> 的值来渲染动态文本：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ message }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>在双花括号中的内容并不只限于标识符或路径——我们可以使用任何有效的 JavaScript 表达式。</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ message.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">split</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">).</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">reverse</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">join</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>现在，试着自己创建一些响应式状态，用它来为模板中的 <code>&lt;h1&gt;</code> 渲染动态的文本内容。</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>现在，试着自己创建一个数据属性，用它来为模板中的 <code>&lt;h1&gt;</code> 渲染动态的文本内容。</p>\\n</div>\\n","_hint":{"App":{"composition.js":"import { reactive, ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const counter = reactive({ count: 0 })\\r\\n    const message = ref(\'Hello World!\')\\r\\n\\r\\n    return {\\r\\n      counter,\\r\\n      message\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      message: \'Hello World!\',\\r\\n      counter: {\\r\\n        count: 0\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<h1>{{ message }}</h1>\\r\\n<p>Count is: {{ counter.count }}</p>\\r\\n"},"description.md":{}}},"step-3":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const titleClass = ref(\'title\')\\r\\n\\r\\n    return {\\r\\n      titleClass\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      titleClass: \'title\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":".title {\\r\\n  color: red;\\r\\n}\\r\\n","template.html":"<h1>Make me red</h1> \x3c!-- 此处添加一个动态 class 绑定 --\x3e\\r\\n"},"description.md":"<h1 id=\\"attribute-bindings\\" tabindex=\\"-1\\">Attribute 绑定 <a class=\\"header-anchor\\" href=\\"#attribute-bindings\\" aria-label=\\"Permalink to &quot;Attribute 绑定 {#attribute-bindings}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>在 Vue 中，mustache 语法 (即双大括号) 只能用于文本插值。为了给 attribute 绑定一个动态值，需要使用 <code>v-bind</code> 指令：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">div</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-bind</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">:</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">id</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">dynamicId</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">div</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p><strong>指令</strong>是由 <code>v-</code> 开头的一种特殊 attribute。它们是 Vue 模板语法的一部分。和文本插值类似，指令的值是可以访问组件状态的 JavaScript 表达式。关于 <code>v-bind</code> 和指令语法的完整细节请详阅<a target=\\"_blank\\" href=\\"/guide/essentials/template-syntax.html\\">指南 - 模板语法</a>。</p>\\n<p>冒号后面的部分 (<code>:id</code>) 是指令的“参数”。此处，元素的 <code>id</code> attribute 将与组件状态里的 <code>dynamicId</code> 属性保持同步。</p>\\n<p>由于 <code>v-bind</code> 使用地非常频繁，它有一个专门的简写语法：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">div</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">id</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">dynamicId</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">div</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>现在，试着把一个动态的 <code>class</code> 绑定添加到这个 <code>&lt;h1&gt;</code> 上，并使用 <code>titleClass</code> 的<span class=\\"options-api\\">数据属性</span><span class=\\"composition-api\\"> ref </span>作为它的值。如果绑定正确，文字将会变为红色。</p>\\n","_hint":{"App":{"template.html":"<h1 :class=\\"titleClass\\">Make me red</h1>\\r\\n","composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const titleClass = ref(\'title\')\\r\\n\\r\\n    return {\\r\\n      titleClass\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      titleClass: \'title\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":".title {\\r\\n  color: red;\\r\\n}\\r\\n"},"description.md":{}}},"step-4":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const count = ref(0)\\r\\n\\r\\n    return {\\r\\n      count\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      count: 0\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"\x3c!-- 使此按钮生效 --\x3e\\r\\n<button>count is: {{ count }}</button>\\r\\n"},"description.md":"<h1 id=\\"event-listeners\\" tabindex=\\"-1\\">事件监听 <a class=\\"header-anchor\\" href=\\"#event-listeners\\" aria-label=\\"Permalink to &quot;事件监听 {#event-listeners}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>我们可以使用 <code>v-on</code> 指令监听 DOM 事件：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">button</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-on</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">:</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">click</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">increment</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ count }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">button</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>因为其经常使用，<code>v-on</code> 也有一个简写语法：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">button</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> @</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">click</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">increment</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ count }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">button</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<p>此处，<code>increment</code> 引用了一个使用 <code>methods</code> 选项声明的函数：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  },</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  methods: {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    increment</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // 更新组件状态</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">      this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  },</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  methods: {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    increment</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // 更新组件状态</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">      this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n<p>在方法中，我们可以使用 <code>this</code> 来访问组件实例。组件实例会暴露 <code>data</code> 中声明的数据属性。我们可以通过改变这些属性的值来更新组件状态。</p>\\n</div>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<p>此处，<code>increment</code> 引用了一个在 <code>&lt;script setup&gt;</code> 中声明的函数：</p>\\n<div class=\\"language-vue vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">vue</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ref } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'vue\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">function</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> increment</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // 更新组件状态</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  count.value</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<p>此处，<code>increment</code> 引用了一个从 <code>setup()</code> 对象返回的方法：</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  function</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> increment</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">e</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // 更新组件状态</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    count.value</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    count,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    increment</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<p>在函数中，我们可以通过修改 ref 来更新组件状态。</p>\\n</div>\\n<p>事件处理函数也可以使用内置表达式，并且可以使用修饰符简化常见任务。这些细节包含在<a target=\\"_blank\\" href=\\"/guide/essentials/event-handling.html\\">指南 - 事件处理</a>。</p>\\n<p>现在，尝试自行实现 <code>increment</code> <span class=\\"options-api\\">方法</span><span class=\\"composition-api\\">函数</span>并通过使用 <code>v-on</code> 将其绑定到按钮上。</p>\\n","_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const count = ref(0)\\r\\n\\r\\n    function increment() {\\r\\n      count.value++\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      count,\\r\\n      increment\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      count: 0\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    increment() {\\r\\n      this.count++\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<button @click=\\"increment\\">count is: {{ count }}</button>\\r\\n"},"description.md":{}}},"step-5":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const text = ref(\'\')\\r\\n\\r\\n    function onInput(e) {\\r\\n      text.value = e.target.value\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      text,\\r\\n      onInput\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      text: \'\'\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    onInput(e) {\\r\\n      this.text = e.target.value\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<input :value=\\"text\\" @input=\\"onInput\\" placeholder=\\"Type here\\">\\r\\n<p>{{ text }}</p>\\r\\n"},"description.md":"<h1 id=\\"form-bindings\\" tabindex=\\"-1\\">表单绑定 <a class=\\"header-anchor\\" href=\\"#form-bindings\\" aria-label=\\"Permalink to &quot;表单绑定 {#form-bindings}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>我们可以同时使用 <code>v-bind</code> 和 <code>v-on</code> 来在表单的输入元素上创建双向绑定：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">input</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">value</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">text</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> @</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">input</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">onInput</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">methods</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  onInput</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(e) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // v-on 处理函数会接收原生 DOM 事件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // 作为其参数。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">    this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.text </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> e.target.value</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">function</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> onInput</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">e</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // v-on 处理函数会接收原生 DOM 事件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // 作为其参数。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  text.value </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> e.target.value</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<p>试着在文本框里输入——你会看到 <code>&lt;p&gt;</code> 里的文本也随着你的输入更新了。</p>\\n<p>为了简化双向绑定，Vue 提供了一个 <code>v-model</code> 指令，它实际上是上述操作的语法糖：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">input</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-model</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">text</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p><code>v-model</code> 会将被绑定的值与 <code>&lt;input&gt;</code> 的值自动同步，这样我们就不必再使用事件处理函数了。</p>\\n<p><code>v-model</code> 不仅支持文本输入框，也支持诸如多选框、单选框、下拉框之类的输入类型。我们在<a target=\\"_blank\\" href=\\"/guide/essentials/forms.html\\">指南 - 表单绑定</a>中讨论了更多的细节。</p>\\n<p>现在，试着用 <code>v-model</code> 把代码重构一下吧。</p>\\n","_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const text = ref(\'\')\\r\\n\\r\\n    return {\\r\\n      text\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      text: \'\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<input v-model=\\"text\\" placeholder=\\"Type here\\">\\r\\n<p>{{ text }}</p>\\r\\n"},"description.md":{}}},"step-6":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const awesome = ref(true)\\r\\n\\r\\n    function toggle() {\\r\\n      // ...\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      awesome,\\r\\n      toggle\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      awesome: true\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    toggle() {\\r\\n      // ...\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<button @click=\\"toggle\\">toggle</button>\\r\\n<h1>Vue is awesome!</h1>\\r\\n<h1>Oh no 😢</h1>\\r\\n"},"description.md":"<h1 id=\\"conditional-rendering\\" tabindex=\\"-1\\">条件渲染 <a class=\\"header-anchor\\" href=\\"#conditional-rendering\\" aria-label=\\"Permalink to &quot;条件渲染 {#conditional-rendering}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>我们可以使用 <code>v-if</code> 指令来有条件地渲染元素：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">awesome</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>Vue is awesome!&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>这个 <code>&lt;h1&gt;</code> 标签只会在 <code>awesome</code> 的值为<a href=\\"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy\\" target=\\"_blank\\" rel=\\"noreferrer\\">真值 (Truthy)</a> 时渲染。若 <code>awesome</code> 更改为<a href=\\"https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy\\" target=\\"_blank\\" rel=\\"noreferrer\\">假值 (Falsy)</a>，它将被从 DOM 中移除。</p>\\n<p>我们也可以使用 <code>v-else</code> 和 <code>v-else-if</code> 来表示其他的条件分支：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">awesome</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>Vue is awesome!&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-else</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>Oh no 😢&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>现在，示例程序同时展示了两个 <code>&lt;h1&gt;</code> 标签，并且按钮不执行任何操作。尝试给它们添加 <code>v-if</code> 和 <code>v-else</code> 指令，并实现 <code>toggle()</code> 方法，让我们可以使用按钮在它们之间切换。</p>\\n<p>更多细节请查阅 <code>v-if</code>：<a target=\\"_blank\\" href=\\"/guide/essentials/conditional.html\\">指南 - 条件渲染</a></p>\\n","_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const awesome = ref(true)\\r\\n\\r\\n    function toggle() {\\r\\n      awesome.value = !awesome.value\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      awesome,\\r\\n      toggle\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      awesome: true\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    toggle() {\\r\\n      this.awesome = !this.awesome\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<button @click=\\"toggle\\">toggle</button>\\r\\n<h1 v-if=\\"awesome\\">Vue is awesome!</h1>\\r\\n<h1 v-else>Oh no 😢</h1>\\r\\n"},"description.md":{}}},"step-7":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    // 给每个 todo 对象一个唯一的 id\\r\\n    let id = 0\\r\\n\\r\\n    const newTodo = ref(\'\')\\r\\n    const todos = ref([\\r\\n      { id: id++, text: \'Learn HTML\' },\\r\\n      { id: id++, text: \'Learn JavaScript\' },\\r\\n      { id: id++, text: \'Learn Vue\' }\\r\\n    ])\\r\\n\\r\\n    function addTodo() {\\r\\n      // ...\\r\\n      newTodo.value = \'\'\\r\\n    }\\r\\n\\r\\n    function removeTodo(todo) {\\r\\n      // ...\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      newTodo,\\r\\n      todos,\\r\\n      addTodo,\\r\\n      removeTodo\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"// 给每个 todo 对象一个唯一的 id\\r\\nlet id = 0\\r\\n\\r\\nexport default {\\r\\n  data() {\\r\\n    return {\\r\\n      newTodo: \'\',\\r\\n      todos: [\\r\\n        { id: id++, text: \'Learn HTML\' },\\r\\n        { id: id++, text: \'Learn JavaScript\' },\\r\\n        { id: id++, text: \'Learn Vue\' }\\r\\n      ]\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    addTodo() {\\r\\n      // ...\\r\\n      this.newTodo = \'\'\\r\\n    },\\r\\n    removeTodo(todo) {\\r\\n      // ...\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\r\\n  <input v-model=\\"newTodo\\">\\r\\n  <button>Add Todo</button>    \\r\\n</form>\\r\\n<ul>\\r\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\r\\n    {{ todo.text }}\\r\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\r\\n  </li>\\r\\n</ul>\\r\\n"},"description.md":"<h1 id=\\"list-rendering\\" tabindex=\\"-1\\">列表渲染 <a class=\\"header-anchor\\" href=\\"#list-rendering\\" aria-label=\\"Permalink to &quot;列表渲染 {#list-rendering}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>我们可以使用 <code>v-for</code> 指令来渲染一个基于源数组的列表：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">ul</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">li</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todo </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">in</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> todos</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">key</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todo.id</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    {{ todo.text }}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">li</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">ul</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>这里的 <code>todo</code> 是一个局部变量，表示当前正在迭代的数组元素。它只能在 <code>v-for</code> 所绑定的元素上或是其内部访问，就像函数的作用域一样。</p>\\n<p>注意，我们还给每个 todo 对象设置了唯一的 <code>id</code>，并且将它作为<a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#key\\">特殊的 <code>key</code> attribute</a> 绑定到每个 <code>&lt;li&gt;</code>。<code>key</code> 使得 Vue 能够精确的移动每个 <code>&lt;li&gt;</code>，以匹配对应的对象在数组中的位置。</p>\\n<p>更新列表有两种方式：</p>\\n<ol>\\n<li>\\n<p>在源数组上调用<a href=\\"https://stackoverflow.com/questions/9009879/which-javascript-array-functions-are-mutating\\" target=\\"_blank\\" rel=\\"noreferrer\\">变更方法</a>：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todos.value.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">push</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(newTodo)</span></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.todos.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">push</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(newTodo)</span></span></code></pre>\\n</div></div>\\n</li>\\n<li>\\n<p>使用新的数组替代原数组：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todos.value </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> todos.value.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">filter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/* ... */</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.todos </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.todos.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">filter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/* ... */</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span></code></pre>\\n</div></div>\\n</li>\\n</ol>\\n<p>这里有一个简单的 todo 列表——试着实现一下 <code>addTodo()</code> 和 <code>removeTodo()</code> 这两个方法的逻辑，使列表能够正常工作！</p>\\n<p>关于 <code>v-for</code> 的更多细节：<a target=\\"_blank\\" href=\\"/guide/essentials/list.html\\">指南 - 列表渲染</a></p>\\n","_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    // 给每个 todo 对象一个唯一的 id\\r\\n    let id = 0\\r\\n\\r\\n    const newTodo = ref(\'\')\\r\\n    const todos = ref([\\r\\n      { id: id++, text: \'Learn HTML\' },\\r\\n      { id: id++, text: \'Learn JavaScript\' },\\r\\n      { id: id++, text: \'Learn Vue\' }\\r\\n    ])\\r\\n\\r\\n    function addTodo() {\\r\\n      todos.value.push({ id: id++, text: newTodo.value })\\r\\n      newTodo.value = \'\'\\r\\n    }\\r\\n\\r\\n    function removeTodo(todo) {\\r\\n      todos.value = todos.value.filter((t) => t !== todo)\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      newTodo,\\r\\n      todos,\\r\\n      addTodo,\\r\\n      removeTodo\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"// 给每个 todo 对象一个唯一的 id\\r\\nlet id = 0\\r\\n\\r\\nexport default {\\r\\n  data() {\\r\\n    return {\\r\\n      newTodo: \'\',\\r\\n      todos: [\\r\\n        { id: id++, text: \'Learn HTML\' },\\r\\n        { id: id++, text: \'Learn JavaScript\' },\\r\\n        { id: id++, text: \'Learn Vue\' }\\r\\n      ]\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    addTodo() {\\r\\n      this.todos.push({ id: id++, text: this.newTodo })\\r\\n      this.newTodo = \'\'\\r\\n    },\\r\\n    removeTodo(todo) {\\r\\n      this.todos = this.todos.filter((t) => t !== todo)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\r\\n  <input v-model=\\"newTodo\\">\\r\\n  <button>Add Todo</button>    \\r\\n</form>\\r\\n<ul>\\r\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\r\\n    {{ todo.text }}\\r\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\r\\n  </li>\\r\\n</ul>\\r\\n"},"description.md":{}}},"step-8":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    let id = 0\\r\\n\\r\\n    const newTodo = ref(\'\')\\r\\n    const hideCompleted = ref(false)\\r\\n    const todos = ref([\\r\\n      { id: id++, text: \'Learn HTML\', done: true },\\r\\n      { id: id++, text: \'Learn JavaScript\', done: true },\\r\\n      { id: id++, text: \'Learn Vue\', done: false }\\r\\n    ])\\r\\n\\r\\n    function addTodo() {\\r\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\r\\n      newTodo.value = \'\'\\r\\n    }\\r\\n\\r\\n    function removeTodo(todo) {\\r\\n      todos.value = todos.value.filter((t) => t !== todo)\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      newTodo,\\r\\n      hideCompleted,\\r\\n      todos,\\r\\n      addTodo,\\r\\n      removeTodo\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"let id = 0\\r\\n\\r\\nexport default {\\r\\n  data() {\\r\\n    return {\\r\\n      newTodo: \'\',\\r\\n      hideCompleted: false,\\r\\n      todos: [\\r\\n        { id: id++, text: \'Learn HTML\', done: true },\\r\\n        { id: id++, text: \'Learn JavaScript\', done: true },\\r\\n        { id: id++, text: \'Learn Vue\', done: false }\\r\\n      ]\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    // ...\\r\\n  },\\r\\n  methods: {\\r\\n    addTodo() {\\r\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\r\\n      this.newTodo = \'\'\\r\\n    },\\r\\n    removeTodo(todo) {\\r\\n      this.todos = this.todos.filter((t) => t !== todo)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","style.css":".done {\\r\\n  text-decoration: line-through;\\r\\n}\\r\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\r\\n  <input v-model=\\"newTodo\\">\\r\\n  <button>Add Todo</button>\\r\\n</form>\\r\\n<ul>\\r\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\r\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\r\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\r\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\r\\n  </li>\\r\\n</ul>\\r\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\r\\n  {{ hideCompleted ? \'Show all\' : \'Hide completed\' }}\\r\\n</button>\\r\\n"},"description.md":"<h1 id=\\"computed-property\\" tabindex=\\"-1\\">计算属性 <a class=\\"header-anchor\\" href=\\"#computed-property\\" aria-label=\\"Permalink to &quot;计算属性 {#computed-property}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>让我们在上一步的 todo 列表基础上继续。现在，我们已经给每一个 todo 添加了切换功能。这是通过给每一个 todo 对象添加 <code>done</code> 属性来实现的，并且使用了 <code>v-model</code> 将其绑定到复选框上：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">li</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todo </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">in</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> todos</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">input</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> type</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"checkbox\\"</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-model</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todo.done</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">li</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>下一个可以添加的改进是隐藏已经完成的 todo。我们已经有了一个能够切换 <code>hideCompleted</code> 状态的按钮。但是应该如何基于状态渲染不同的列表项呢？</p>\\n<div class=\\"options-api\\">\\n<p>介绍一个新概念：<a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\">计算属性</a>。我们可以使用 <code>computed</code> 选项声明一个响应式的属性，它的值由其他属性计算而来：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  computed: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    filteredTodos</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // 根据 `this.hideCompleted` 返回过滤后的 todo 项目</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  computed: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    filteredTodos</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // 根据 `this.hideCompleted` 返回过滤后的 todo 项目</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"composition-api\\">\\n<p>介绍一个新 API：<a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\"><code>computed()</code></a>。它可以让我们创建一个计算属性 ref，这个 ref 会动态地根据其他响应式数据源来计算其 <code>.value</code>：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ref, computed } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'vue\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> hideCompleted</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">false</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> todos</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  /* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> filteredTodos</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> computed</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // 根据 `todos.value` &#x26; `hideCompleted.value`</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // 返回过滤后的 todo 项目</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { createApp, ref, computed } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'vue\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> hideCompleted</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">false</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> todos</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      /* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> filteredTodos</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> computed</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // 根据 `todos.value` &#x26; `hideCompleted.value`</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // 返回过滤后的 todo 项目</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"language-diff vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">diff</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#B31D28;--shiki-dark:#FDAEB7\\">- &#x3C;li v-for=\\"todo in todos\\"></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">+ &#x3C;li v-for=\\"todo in filteredTodos\\"></span></span></code></pre>\\n</div><p>计算属性会自动跟踪其计算中所使用的到的其他响应式状态，并将它们收集为自己的依赖。计算结果会被缓存，并只有在其依赖发生改变时才会被自动更新。</p>\\n<p>现在，试着添加 <code>filteredTodos</code> 计算属性并实现计算逻辑！如果实现正确，在隐藏已完成项目的状态下勾选一个 todo，它也应当被立即隐藏。</p>\\n","_hint":{"App":{"composition.js":"import { ref, computed } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    let id = 0\\r\\n\\r\\n    const newTodo = ref(\'\')\\r\\n    const hideCompleted = ref(false)\\r\\n    const todos = ref([\\r\\n      { id: id++, text: \'Learn HTML\', done: true },\\r\\n      { id: id++, text: \'Learn JavaScript\', done: true },\\r\\n      { id: id++, text: \'Learn Vue\', done: false }\\r\\n    ])\\r\\n\\r\\n    const filteredTodos = computed(() => {\\r\\n      return hideCompleted.value\\r\\n        ? todos.value.filter((t) => !t.done)\\r\\n        : todos.value\\r\\n    })\\r\\n\\r\\n    function addTodo() {\\r\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\r\\n      newTodo.value = \'\'\\r\\n    }\\r\\n\\r\\n    function removeTodo(todo) {\\r\\n      todos.value = todos.value.filter((t) => t !== todo)\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      newTodo,\\r\\n      hideCompleted,\\r\\n      todos,\\r\\n      filteredTodos,\\r\\n      addTodo,\\r\\n      removeTodo\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"let id = 0\\r\\n\\r\\nexport default {\\r\\n  data() {\\r\\n    return {\\r\\n      newTodo: \'\',\\r\\n      hideCompleted: false,\\r\\n      todos: [\\r\\n        { id: id++, text: \'Learn HTML\', done: true },\\r\\n        { id: id++, text: \'Learn JavaScript\', done: true },\\r\\n        { id: id++, text: \'Learn Vue\', done: false }\\r\\n      ]\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    filteredTodos() {\\r\\n      return this.hideCompleted\\r\\n        ? this.todos.filter((t) => !t.done)\\r\\n        : this.todos\\r\\n    }\\r\\n  },\\r\\n  methods: {\\r\\n    addTodo() {\\r\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\r\\n      this.newTodo = \'\'\\r\\n    },\\r\\n    removeTodo(todo) {\\r\\n      this.todos = this.todos.filter((t) => t !== todo)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\r\\n  <input v-model=\\"newTodo\\">\\r\\n  <button>Add Todo</button>\\r\\n</form>\\r\\n<ul>\\r\\n  <li v-for=\\"todo in filteredTodos\\" :key=\\"todo.id\\">\\r\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\r\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\r\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\r\\n  </li>\\r\\n</ul>\\r\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\r\\n  {{ hideCompleted ? \'Show all\' : \'Hide completed\' }}\\r\\n</button>\\r\\n","style.css":".done {\\r\\n  text-decoration: line-through;\\r\\n}\\r\\n"},"description.md":{}}},"step-9":{"App":{"composition.js":"import { ref } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const pElementRef = ref(null)\\r\\n\\r\\n    return {\\r\\n      pElementRef\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  // ...\\r\\n}\\r\\n","template.html":"<p ref=\\"pElementRef\\">hello</p>\\r\\n"},"description.md":"<h1 id=\\"lifecycle-and-template-refs\\" tabindex=\\"-1\\">生命周期和模板引用 <a class=\\"header-anchor\\" href=\\"#lifecycle-and-template-refs\\" aria-label=\\"Permalink to &quot;生命周期和模板引用 {#lifecycle-and-template-refs}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>目前为止，Vue 为我们处理了所有的 DOM 更新，这要归功于响应性和声明式渲染。然而，有时我们也会不可避免地需要手动操作 DOM。</p>\\n<p>这时我们需要使用<strong>模板引用</strong>——也就是指向模板中一个 DOM 元素的 ref。我们需要通过<a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#ref\\">这个特殊的 <code>ref</code> attribute</a> 来实现模板引用：</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"pElementRef\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>hello&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>要访问该引用，我们需要声明<span class=\\"html\\">并暴露</span>一个同名的 ref：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> pElementRef</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">null</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> pElementRef</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">null</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    pElementRef</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<p>注意这个 ref 使用 <code>null</code> 值来初始化。这是因为当 <span class=\\"sfc\\"><code>&lt;script setup&gt;</code></span><span class=\\"html\\"><code>setup()</code></span> 执行时，DOM 元素还不存在。模板引用 ref 只能在组件<strong>挂载</strong>后访问。</p>\\n<p>要在挂载之后执行代码，我们可以使用 <code>onMounted()</code> 函数：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { onMounted } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'vue\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">onMounted</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // 此时组件已经挂载。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { onMounted } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'vue\'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    onMounted</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // 此时组件已经挂载。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<p>此元素将作为 <code>this.$refs.pElementRef</code> 暴露在 <code>this.$refs</code> 上。然而，你只能在组件<strong>挂载</strong>之后访问它。</p>\\n<p>要在挂载之后执行代码，我们可以使用 <code>mounted</code> 选项：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  mounted</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // 此时组件已经挂载。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" ><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  mounted</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // 此时组件已经挂载。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n</div>\\n<p>这被称为<strong>生命周期钩子</strong>——它允许我们注册一个在组件的特定生命周期调用的回调函数。还有一些其他的钩子如 <span class=\\"options-api\\"><code>created</code> 和 <code>updated</code></span><span class=\\"composition-api\\"><code>onUpdated</code> 和 <code>onUnmounted</code></span>。更多细节请查阅<a target=\\"_blank\\" href=\\"/guide/essentials/lifecycle.html#lifecycle-diagram\\">生命周期图示</a>。</p>\\n<p>现在，尝试添加一个 <span class=\\"options-api\\"><code>mounted</code></span><span class=\\"composition-api\\"><code>onMounted</code></span> 钩子，然后通过 <span class=\\"options-api\\"><code>this.$refs.pElementRef</code></span><span class=\\"composition-api\\"><code>pElementRef.value</code></span> 访问 <code>&lt;p&gt;</code>，并直接对其执行一些 DOM 操作。(例如修改它的 <code>textContent</code>)。</p>\\n","_hint":{"App":{"composition.js":"import { ref, onMounted } from \'vue\'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const pElementRef = ref(null)\\r\\n\\r\\n    onMounted(() => {\\r\\n      pElementRef.value.textContent = \'mounted!\'\\r\\n    })\\r\\n\\r\\n    return {\\r\\n      pElementRef\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  mounted() {\\r\\n    this.$refs.pElementRef.textContent = \'mounted!\'\\r\\n  }\\r\\n}\\r\\n","template.html":"<p ref=\\"pElementRef\\">hello</p>\\r\\n"},"description.md":{}}}}'),M={class:"tutorial"},L=["innerHTML"],I={key:0,class:"hint"},q=["href"],P=["href"],V=w(d({__name:"TutorialRepl",setup(d){const w=new s({defaultVueRuntimeURL:`https://unpkg.com/vue@${k}/dist/vue.esm-browser.js`}),V=o(),H=E("prefer-composition"),W=E("prefer-sfc"),$=o(""),J=Object.keys(S).sort(((s,i)=>Number(s.replace(/^step-/,""))-Number(i.replace(/^step-/,"")))),O=J.length,R=/<h1.*?>(.+?)<a class="header-anchor/,Z=J.map(((s,i)=>({text:`${i+1}. ${S[s]["description.md"].match(R)[1]}`,link:`#${s}`}))),N=c((()=>{var s;return null==(s=S[$.value])?void 0:s["description.md"]})),z=c((()=>J.indexOf($.value)+1)),X=c((()=>{const s=$.value.match(/\d+/),i=s&&"step-"+(+s[0]-1);if(i&&S.hasOwnProperty(i))return i})),U=c((()=>{const s=$.value.match(/\d+/),i=s&&"step-"+(+s[0]+1);if(i&&S.hasOwnProperty(i))return i})),G=o(!1);function K(s=!1){let i=location.hash.slice(1);S.hasOwnProperty(i)||(i="step-1",location.replace(`/tutorial/#${i}`)),$.value=i;const n=G.value?S[i]._hint:S[i];w.setFiles(W.value?t(n,H.value):e(n,H.value),W.value?"App.vue":"index.html"),s&&T((()=>{V.value.scrollTop=0}))}function Y(){G.value=!G.value,K()}return g([H,W],(()=>K())),i((()=>{G.value=!1,K(!0)})),K(),(s,i)=>{var t;return y(),u("section",M,[m("article",{class:"instruction",ref_key:"instruction",ref:V},[v(p),v(f(l),{button:`${z.value} / ${f(O)}`},{default:C((()=>[(y(!0),u(F,null,B(f(Z),((s,i)=>(y(),x(f(_),{class:b(["vt-menu-link",{active:i+1===z.value}]),href:s.link},{default:C((()=>[D(A(s.text),1)])),_:2},1032,["class","href"])))),256))])),_:1},8,["button"]),m("div",{class:"vt-doc",innerHTML:N.value},null,8,L),(null==(t=f(S)[$.value])?void 0:t._hint)?(y(),u("div",I,[m("button",{onClick:Y},A(G.value?"重置代码":"看答案！"),1)])):j("",!0),m("footer",null,[X.value?(y(),u("a",{key:0,href:`#${X.value}`},[v(f(r),{class:"vt-link-icon",style:{margin:"0"}}),D(" 上一步")],8,q)):j("",!0),U.value?(y(),u("a",{key:1,class:"next-step",href:`#${U.value}`},[D("下一步 "),v(f(h),{class:"vt-link-icon"})],8,P)):j("",!0)])],512),v(f(a),{layout:"vertical",editor:f(n),store:f(w),showCompileOutput:!1,clearConsole:!1,showImportMap:!1,onKeyup:i[0]||(i[0]=s=>G.value=!1)},null,8,["editor","store"])])}}}),[["__scopeId","data-v-883c9573"]]);export{V as default};
