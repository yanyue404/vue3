import{L as s,_ as i,r as a,o as n,c as t,u as l,t as e,e as h,F as p,l as k,j as r,p as d,m as E,d as g,a as c}from"./chunks/framework.eLjRmN09.js";const y=s(Array.from(Array(3).keys()).map((s=>Array.from(Array(3).keys()).map((s=>"")))));function o(s){if(!s.startsWith("="))return s;s=s.slice(1).replace(/\b([A-Z])(\d{1,2})\b/g,((s,i,a)=>`get(${i.charCodeAt(0)-65},${a})`));try{return new Function("get",`return ${s}`)(F)}catch(i){return`#ERROR ${i}`}}function F(s,i){const a=o(y[s][i]),n=Number(a);return Number.isFinite(n)?n:a}y[0][0]="1",y[0][1]="2",y[0][2]="= A0 + A1";const u=["title"],A=["value"],v={key:1},C=i({__name:"SpreadSheetCell",props:{c:Number,r:Number},setup(s){const i=s,h=a(!1);function p(s){h.value=!1,y[i.c][i.r]=s.target.value.trim()}return(i,a)=>(n(),t("div",{class:"cell",title:l(y)[s.c][s.r],onClick:a[1]||(a[1]=s=>h.value=!0)},[h.value?(n(),t("input",{key:0,value:l(y)[s.c][s.r],onChange:p,onBlur:p,onVnodeMounted:a[0]||(a[0]=({el:s})=>s.focus())},null,40,A)):(n(),t("span",v,e(l(o)(l(y)[s.c][s.r])),1))],8,u))}},[["__scopeId","data-v-58f491f3"]]),D=(s=>(d("data-v-13916f75"),s=s(),E(),s))((()=>h("th",null,null,-1))),b=i({__name:"SpreadSheet",setup(s){const i=y.map(((s,i)=>String.fromCharCode(65+i)));return(s,a)=>(n(),t("table",null,[h("thead",null,[h("tr",null,[D,(n(!0),t(p,null,k(l(i),(s=>(n(),t("th",null,e(s),1)))),256))])]),h("tbody",null,[(n(!0),t(p,null,k(l(y)[0].length,(s=>(n(),t("tr",null,[h("th",null,e(s-1),1),(n(!0),t(p,null,k(l(i),((i,a)=>(n(),t("td",null,[r(C,{r:s-1,c:a},null,8,["r","c"])])))),256))])))),256))])]))}},[["__scopeId","data-v-13916f75"]]),f=h("h1",{id:"reactivity-in-depth",tabindex:"-1"},[g("深入响应式系统 "),h("a",{class:"header-anchor",href:"#reactivity-in-depth","aria-label":'Permalink to "深入响应式系统 {#reactivity-in-depth}"'},"​")],-1),m=h("p",null,"Vue 最标志性的功能就是其低侵入性的响应式系统。组件状态都是由响应式的 JavaScript 对象组成的。当更改它们时，视图会随即自动更新。这让状态管理更加简单直观，但理解它是如何工作的也是很重要的，这可以帮助我们避免一些常见的陷阱。在本节中，我们将深入研究 Vue 响应性系统的一些底层细节。",-1),B=h("h2",{id:"what-is-reactivity",tabindex:"-1"},[g("什么是响应性 "),h("a",{class:"header-anchor",href:"#what-is-reactivity","aria-label":'Permalink to "什么是响应性 {#what-is-reactivity}"'},"​")],-1),w=h("p",null,"这个术语在今天的各种编程讨论中经常出现，但人们说它的时候究竟是想表达什么意思呢？本质上，响应性是一种可以使我们声明式地处理变化的编程范式。一个经常被拿来当作典型例子的用例即是 Excel 表格：",-1),j=c("",99),x=JSON.parse('{"title":"深入响应式系统","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"什么是响应性","slug":"what-is-reactivity","link":"#what-is-reactivity","children":[]},{"level":2,"title":"Vue 中的响应性是如何工作的","slug":"how-reactivity-works-in-vue","link":"#how-reactivity-works-in-vue","children":[]},{"level":2,"title":"运行时 vs. 编译时响应性","slug":"runtime-vs-compile-time-reactivity","link":"#runtime-vs-compile-time-reactivity","children":[]},{"level":2,"title":"响应性调试","slug":"reactivity-debugging","link":"#reactivity-debugging","children":[{"level":3,"title":"组件调试钩子","slug":"component-debugging-hooks","link":"#component-debugging-hooks","children":[]},{"level":3,"title":"计算属性调试","slug":"computed-debugging","link":"#computed-debugging","children":[]},{"level":3,"title":"侦听器调试","slug":"watcher-debugging","link":"#watcher-debugging","children":[]}]},{"level":2,"title":"与外部状态系统集成","slug":"integration-with-external-state-systems","link":"#integration-with-external-state-systems","children":[{"level":3,"title":"不可变数据","slug":"immutable-data","link":"#immutable-data","children":[]},{"level":3,"title":"状态机","slug":"state-machines","link":"#state-machines","children":[]},{"level":3,"title":"RxJS","slug":"rxjs","link":"#rxjs","children":[]}]},{"level":2,"title":"与信号 (signal) 的联系","slug":"connection-to-signals","link":"#connection-to-signals","children":[{"level":3,"title":"API 设计权衡","slug":"api-design-trade-offs","link":"#api-design-trade-offs","children":[]}]}],"relativePath":"guide/extras/reactivity-in-depth.md","filePath":"guide/extras/reactivity-in-depth.md"}'),P={name:"guide/extras/reactivity-in-depth.md"},S=Object.assign(P,{setup:s=>(s,i)=>(n(),t("div",null,[f,m,B,w,r(b),j]))});export{x as __pageData,S as default};
